package CivilWarfare;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.io.FileReader;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Scanner;





public class PlayWindow {
	private static double soldierOneHealth, soldierTwoHealth, soldierThreeHealth, playerHealth;
	
	public static void playGame(String playerName, int slide, boolean seenTitle)
	{
		
		
		JFrame gameFrame = new JFrame("The American Civil War");
		gameFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		gameFrame.setSize(900, 600);
		JPanel imagePanel = new JPanel(new BorderLayout(1, 2));
		JLabel imageLabel = new JLabel();
		
		

		JPanel buttonPanel = new JPanel(new FlowLayout());
		JButton continueButton = new JButton("Continue");
		JButton logoutButton = new JButton("Log out");
		
		
		imagePanel.setSize(gameFrame.getSize());
		
		gameFrame.setResizable(false);
		
		buttonPanel.setSize(580, 45);
		imagePanel.add(buttonPanel, BorderLayout.SOUTH);
		gameFrame.add(imagePanel);
		
		gameFrame.setVisible(true);
		
		
		logoutButton.addActionListener(new ActionListener() {

			  public void actionPerformed(ActionEvent event) {
			    //do whatever should happen when the button is clicked...
				  gameFrame.dispose();
				  PlayWindow.login();
			  }

			});
		
		
		if(!seenTitle) {
			BufferedImage img3 = null;
			try {
			    img3 = ImageIO.read(new File("images/titleScreen.jpg"));
			} catch (IOException e) {
			    e.printStackTrace();
			}
			
			Image dimg3 = img3.getScaledInstance(imagePanel.getWidth(), imagePanel.getHeight(),
			        Image.SCALE_SMOOTH);
			
			
			imageLabel.setIcon(new ImageIcon(dimg3));
			imagePanel.add(imageLabel);
			
			if(slide>=0)
			{
				//show a welcome back soldier pick up where left off screen with continue button listener
			}
		}
		
		if(slide < 0)
		{
			//show introductory slides and demo battle scene with skip button
			
			
			try {
				File fileToBeModified = new File("incidentals/users.txt");
				File fileToBeModified2 = new File("incidentals/users.txt");
				//BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified2));
				BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified));
				StringBuffer oldString = new StringBuffer("");
				String line, target1;
				while ((line = reader.readLine()) != null) {
					System.out.println("loop checked");
					if(line.contains("Username: " + playerName + " "))
					{
						line = line.trim();
						target1 = line.substring(line.indexOf("Last Slide: "));
						//target2 = line.substring(0, line.indexOf("ast Slide: "));
						//System.out.println("target1:" + target1 + "end" + " tgt2:" + target2 + "end");
						line = line.replace(target1, "Last Slide: 0");
						System.out.println("line checked");
						
					}
					else
						System.out.println("nothing");
					oldString.append(line);
					if(line.length()>3)
						oldString.append("\n");
					System.out.println(oldString);
				}
				//theBR.write(oldString.toString());
				
				System.out.println(oldString);
				//theBR.close();
				reader.close();
				BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified2));
				theBR.write(oldString.toString());
				theBR.close();
				
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
	        
		}
		
			
		if(slide < 24) {
		ImageIcon[] imgSet = new ImageIcon[24];
		
		boolean[] responded = new boolean[7];
		responded[0]=false;
		responded[1]=false;
		responded[2]=false;
		responded[3]=false;
		responded[4]=false;
		responded[5]=false;
		responded[6]=false;
		
		//imagePanel.setSize(gameFrame.getSize());
		
		
		
		/* Testing moving these up
		 * 
		 
		buttonPanel.setSize(580, 45);
		imagePanel.add(buttonPanel, BorderLayout.SOUTH);
		gameFrame.add(imagePanel);
		
		gameFrame.setVisible(true);
		
		*/
		
		String extension;
		
		//start image write
		for(int i = 0; i < 24; i++) {
			BufferedImage img0 = null;
			if(i==22)
				extension=".jpg";
			else
				extension=".png";
				
			try {
			    img0 = ImageIO.read(new File("images/"+(i+"")+extension));
			    System.out.println(i);
			} catch (IOException e) {
			    e.printStackTrace();
			}
			
			Image dimg0 = img0.getScaledInstance(imagePanel.getWidth(), imagePanel.getHeight(),
			        Image.SCALE_SMOOTH);
			
			
			imgSet[i]=new ImageIcon(dimg0);
			
			//imageLabel.setIcon(imgSet[0]);
		}
		//end image write
		
		//imageLabel.setIcon(imgSet[0]);
		imagePanel.add(imageLabel, BorderLayout.NORTH);
		
		buttonPanel.add(continueButton);
		buttonPanel.add(logoutButton);
		
		//testing images folder array write
		
		
		
		//end test image folder array write
		
		continueButton.addActionListener(new ActionListener() {
			int count = slide-1;  //should start at -1
			
			boolean powerUp = false;
			String response;
			  public void actionPerformed(ActionEvent event) {
			    
				  
				  if(count == -1)
				  {
					  BufferedImage img4 = null;
						try {
						    img4 = ImageIO.read(new File("images/Antebellum.png"));
						} catch (IOException e) {
						    e.printStackTrace();
						}
						
						Image dimg4 = img4.getScaledInstance(imagePanel.getWidth(), imagePanel.getHeight(),
						        Image.SCALE_SMOOTH);
						
						
						imageLabel.setIcon(new ImageIcon(dimg4));
						imagePanel.add(imageLabel);
						
				  }
				  
				  //end battle scene if statement test
				  else if(count < imgSet.length) {
					  if(count<0)
						  count=0;
					  imageLabel.setIcon(imgSet[count]);
					  
					  if(count==3 && !responded[0])
					  {
						  response = JOptionPane.showInputDialog(gameFrame, "The years before the Civil War "
						  		+ "were also known as the ________ Period.");
						  if(!PlayWindow.validEntry(response))
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Please enter a valid response.");
						  }
						  else if(!response.equalsIgnoreCase("antebellum"))
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Antebellum is the Correct Term.");
						  }
						  else
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Correct!");
						  }
						  
						  if(PlayWindow.validEntry(response))
						  {
							  responded[0]=true;
							  try {
									File fileToBeModified3 = new File("incidentals/data.txt");
									BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
									StringBuffer newString = new StringBuffer("");
									String line;
									while ((line = reader.readLine()) != null) {
										if(line.contains("End of user " + playerName + "'s records."))
										{
								
											newString.append(playerName + "'s Answer to Review Question 1: " + response + 
													"\n\nEnd of user " + playerName + "'s records.\n");							
										}
										else if(!line.contains(playerName + "'s Answer to Review Question 1:")) {
								
											newString.append(line);
											if(line.length()>3)
												newString.append("\n");
											if(line.contains("Student records for") || line.contains("End of user"))
												newString.append("\n");
											if(line.contains("End of user"))
												newString.append("\n\n");
											
										}
									
									}
									//count++;
									reader.close();
									BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
									theBR.write(newString.toString());
									theBR.close();
									
								} catch (Exception e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							  
							  //write student answer to data.txt above
						  }
					  }
					  
					  else if(count==6 && !responded[1])
					  {
						  response = JOptionPane.showInputDialog(gameFrame, "Who invented the Cotton Gin?");
							  if(!PlayWindow.validEntry(response))
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Please enter a valid response.");
							  }
							  else if(!response.equalsIgnoreCase("eli whitney"))
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Eli Whitney is the Correct Term.");
							  }
							  else
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Correct!");
							  }
							  
							  if(PlayWindow.validEntry(response))
							  {
								  responded[1]=true;
								  try {
										File fileToBeModified3 = new File("incidentals/data.txt");
										BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
										StringBuffer newString = new StringBuffer("");
										String line;
										while ((line = reader.readLine()) != null) {
											if(line.contains("End of user " + playerName + "'s records."))
											{
									
												newString.append(playerName + "'s Answer to Review Question 2: " + response + 
														"\n\nEnd of user " + playerName + "'s records.\n");							
											}
											else if(!line.contains(playerName + "'s Answer to Review Question 2:")) {
									
												newString.append(line);
												if(line.length()>3)
													newString.append("\n");
												if(line.contains("Student records for") || line.contains("End of user"))
													newString.append("\n");
												if(line.contains("End of user"))
													newString.append("\n\n");
												
											}
										
										}
										
										reader.close();
										BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
										theBR.write(newString.toString());
										theBR.close();
										
									} catch (Exception e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								  
								  //write student answer to data.txt above
							  }
					  }
					  else if(count==9 && !responded[2])
					  {
						  response = JOptionPane.showInputDialog(gameFrame, "Religious______ changed much of AntebellumAmerican society. "
						  		+ "Enter A for Awakening, B for Revivalism, C for Evangelism, or D for secularism.");
						  if(!PlayWindow.validEntry(response))
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Please enter a valid response.");
						  }
						  else if(!response.equalsIgnoreCase("b"))
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. B for Revivalism is the Correct Term.");
						  }
						  else
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Correct!");
						  }
						  
						  if(PlayWindow.validEntry(response))
						  {
							  responded[2]=true;
							  try {
									File fileToBeModified3 = new File("incidentals/data.txt");
									BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
									StringBuffer newString = new StringBuffer("");
									String line;
									while ((line = reader.readLine()) != null) {
										if(line.contains("End of user " + playerName + "'s records."))
										{
								
											newString.append(playerName + "'s Answer to Review Question 3: " + response + 
													"\n\nEnd of user " + playerName + "'s records.\n");							
										}
										else if(!line.contains(playerName + "'s Answer to Review Question 3:")) {
								
											newString.append(line);
											if(line.length()>3)
												newString.append("\n");
											if(line.contains("Student records for") || line.contains("End of user"))
												newString.append("\n");
											if(line.contains("End of user"))
												newString.append("\n\n");
											
										}
									
									}
									reader.close();
									BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
									theBR.write(newString.toString());
									theBR.close();
									
								} catch (Exception e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
						  }
							  //write student answer to data.txt above
					  }
					  else if(count==12 && !responded[3])
					  {
						  response = JOptionPane.showInputDialog(gameFrame, "The debate over state vs federal rights caused the ______ Crisis of 1832-1833.");
							  if(!PlayWindow.validEntry(response))
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Please enter a valid response.");
							  }
							  else if(!response.equalsIgnoreCase("nullification"))
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Nullification is the Correct Term.");
							  }
							  else
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Correct!");
							  }
							  
							  if(PlayWindow.validEntry(response))
							  {
								  responded[3]=true;
								  try {
										File fileToBeModified3 = new File("incidentals/data.txt");
										BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
										StringBuffer newString = new StringBuffer("");
										String line;
										while ((line = reader.readLine()) != null) {
											if(line.contains("End of user " + playerName + "'s records."))
											{
									
												newString.append(playerName + "'s Answer to Review Question 4: " + response + 
														"\n\nEnd of user " + playerName + "'s records.\n");							
											}
											else if(!line.contains(playerName + "'s Answer to Review Question 4:")) {
									
												newString.append(line);
												if(line.length()>3)
													newString.append("\n");
												if(line.contains("Student records for") || line.contains("End of user"))
													newString.append("\n");
												if(line.contains("End of user"))
													newString.append("\n\n");
												
											}
										
										}
										
										reader.close();
										BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
										theBR.write(newString.toString());
										theBR.close();
										
									} catch (Exception e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
							  }
								  //write student answer to data.txt above
					  }
					  else if(count==15 && !responded[4])
					  {
						  response = JOptionPane.showInputDialog(gameFrame, "True or False: Northerners wanted freedom and equality for black slaves in the South.");
						  if(!PlayWindow.validEntry(response))
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Please enter a valid response.");
						  }
						  else if(!response.equalsIgnoreCase("false"))
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. False is the Correct Term.");
						  }
						  else
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Correct!");
						  }
						  
						  if(PlayWindow.validEntry(response))
						  {
							  responded[4]=true;
							  try {
									File fileToBeModified3 = new File("incidentals/data.txt");
									BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
									StringBuffer newString = new StringBuffer("");
									String line;
									while ((line = reader.readLine()) != null) {
										if(line.contains("End of user " + playerName + "'s records."))
										{
								
											newString.append(playerName + "'s Answer to Review Question 5: " + response + 
													"\n\nEnd of user " + playerName + "'s records.\n");							
										}
										else if(!line.contains(playerName + "'s Answer to Review Question 5:")) {
								
											newString.append(line);
											if(line.length()>3)
												newString.append("\n");
											if(line.contains("Student records for") || line.contains("End of user"))
												newString.append("\n");
											if(line.contains("End of user"))
												newString.append("\n\n");
											
										}
									
									}
									reader.close();
									BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
									theBR.write(newString.toString());
									theBR.close();
									
								} catch (Exception e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
						  }
							  //write student answer to data.txt above
					  }
					  else if(count==18 && !responded[5])
					  {
						  response = JOptionPane.showInputDialog(gameFrame, "______ Destiny was a belief system that caused Americans to spread their "
						  		+ "religious and political views across the country.");
						  if(!PlayWindow.validEntry(response))
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Please enter a valid response.");
						  }
						  else if(!response.equalsIgnoreCase("Manifest"))
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Manifest is the Correct Term.");
						  }
						  else
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Correct!");
						  }
						  
						  if(PlayWindow.validEntry(response))
						  {
							  responded[5]=true;
							  try {
									File fileToBeModified3 = new File("incidentals/data.txt");
									BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
									StringBuffer newString = new StringBuffer("");
									String line;
									while ((line = reader.readLine()) != null) {
										if(line.contains("End of user " + playerName + "'s records."))
										{
								
											newString.append(playerName + "'s Answer to Review Question 6: " + response + 
													"\n\nEnd of user " + playerName + "'s records.\n");							
										}
										else if(!line.contains(playerName + "'s Answer to Review Question 6:")) {
								
											newString.append(line);
											if(line.length()>3)
												newString.append("\n");
											if(line.contains("Student records for") || line.contains("End of user"))
												newString.append("\n");
											if(line.contains("End of user"))
												newString.append("\n\n");
											
										}
									
									}
									reader.close();
									BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
									theBR.write(newString.toString());
									theBR.close();
									
								} catch (Exception e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
						  }
							  //write student answer to data.txt above
					  }
					  else if(count==20 && !responded[6])
					  {
						  response = JOptionPane.showInputDialog(gameFrame, "What side won the First Battle of Bull Run?");
							  if(!PlayWindow.validEntry(response))
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Please enter a valid response.");
							  }
							  else if(!response.equalsIgnoreCase("Confederate"))
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Confederate is the Correct Term.");
							  }
							  else
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Correct!");
							  }
							  
							  if(PlayWindow.validEntry(response))
							  {
								  responded[6]=true;  
								  try {
										File fileToBeModified3 = new File("incidentals/data.txt");
										BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
										StringBuffer newString = new StringBuffer("");
										String line;
										while ((line = reader.readLine()) != null) {
											if(line.contains("End of user " + playerName + "'s records."))
											{
									
												newString.append(playerName + "'s Answer to Review Question 7: " + response + 
														"\n\nEnd of user " + playerName + "'s records.\n");							
											}
											else if(!line.contains(playerName + "'s Answer to Review Question 7:")) {
									
												newString.append(line);
												if(line.length()>3)
													newString.append("\n");
												if(line.contains("Student records for") || line.contains("End of user"))
													newString.append("\n");
												if(line.contains("End of user"))
													newString.append("\n\n");
												
											}
										
										}
										reader.close();
										BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
										theBR.write(newString.toString());
										theBR.close();
										
									} catch (Exception e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
							  }
								  //write student answer to data.txt above
					  }
					  else if(count==22) //big boy quiz here
					  {
						  for(int k = 0; k < 10; k ++) {
							  if(k == 0)
							  {
								  response = JOptionPane.showInputDialog(gameFrame, "The wage labor system "
								  		+ "helped spawn the _____ Class. ");
								  
								  if(!PlayWindow.validEntry(response))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Middle is the Correct Term.");
								  }
								  else if(!response.equalsIgnoreCase("middle"))
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Middle is the Correct Term.");
								  else
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Correct!");
								  }
								  if(!PlayWindow.validEntry(response))
									  response="Blank";
									  
									  try {
											File fileToBeModified3 = new File("incidentals/data.txt");
											BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
											StringBuffer newString = new StringBuffer("");
											String line;
											while ((line = reader.readLine()) != null) {
												if(line.contains("End of user " + playerName + "'s records."))
												{								
													newString.append(playerName + "'s Answer to Quiz 1 Question " + (k+1) + ": " + response + 
															"\n\nEnd of user " + playerName + "'s records.\n\n");							
												}
												else if(!line.contains(playerName + "'s Answer to Quiz 1 Question " + (k+1) + ":")) {
										
													newString.append(line);
													if(line.length()>3)
														newString.append("\n");
													if(line.contains("Student records for") || line.contains("End of user"))
														newString.append("\n");
													if(line.contains("End of user"))
														newString.append("\n\n");
													
												}
											
											}
											reader.close();
											BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
											theBR.write(newString.toString());
											theBR.close();
											
										} catch (Exception e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
								  
									  //write student answer to data.txt above
								  
							  }
							  if(k==1)
							  {
								  response = JOptionPane.showInputDialog(gameFrame, "True or False: the North’s "
								  		+ "economy was based primarily on agriculture in the Antebellum years.");
								  
								  if(!PlayWindow.validEntry(response))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. False is the Correct Term.");
								  }
								  else if(!response.equalsIgnoreCase("false"))
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. False is the Correct Term.");
								  else
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Correct!");
								  }
								  if(!PlayWindow.validEntry(response))
									  response="Blank";
									  
									  try {
											File fileToBeModified3 = new File("incidentals/data.txt");
											BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
											StringBuffer newString = new StringBuffer("");
											String line;
											while ((line = reader.readLine()) != null) {
												if(line.contains("End of user " + playerName + "'s records."))
												{								
													newString.append(playerName + "'s Answer to Quiz 1 Question " + (k+1) + ": " + response + 
															"\n\nEnd of user " + playerName + "'s records.\n\n");							
												}
												else if(!line.contains(playerName + "'s Answer to Quiz 1 Question " + (k+1) + ":")) {
										
													newString.append(line);
													if(line.length()>3)
														newString.append("\n");
													if(line.contains("Student records for") || line.contains("End of user"))
														newString.append("\n");
													if(line.contains("End of user"))
														newString.append("\n\n");
													
												}
											
											}
											reader.close();
											BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
											theBR.write(newString.toString());
											theBR.close();
											
										} catch (Exception e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
								  
									  //write student answer to data.txt above
							  }
							  if(k==2)
							  {
								  response = JOptionPane.showInputDialog(gameFrame, "Each side had about ______ troops in "
								  		+ "the Battle of Bull Run. Enter A for 1000, B for 5000, C for 10000, or D for 20000.");
								  
								  if(!PlayWindow.validEntry(response))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. D for 20000 is the Correct Term.");
								  }
								  else if(!response.equalsIgnoreCase("d"))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. D for 20000 is the Correct Term.");
								  }
								  else
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Correct!");
								  }
								  if(!PlayWindow.validEntry(response))
									  response="Blank";
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 1 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 1 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
							  }
							  if(k==3)
							  {
								  response = JOptionPane.showInputDialog(gameFrame, "_______ "
								  		+ "would eventually become the most divisive issue in America. ");
								  
								  if(!PlayWindow.validEntry(response))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Slavery is the Correct Term.");
								  }
								  else if(!response.equalsIgnoreCase("slavery"))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Slavery is the Correct Term.");
								  }
								  else
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Correct!");
								  }
								  if(!PlayWindow.validEntry(response))
									  response="Blank";
								  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 1 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 1 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
							  }
							  if(k==4)
							  {
								  response = JOptionPane.showInputDialog(gameFrame, "True or False: the middle class was made mostly of wealthy farmers.");
								  
								  if(!PlayWindow.validEntry(response))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. False is the Correct Term.");
								  }
								  else if(!response.equalsIgnoreCase("false"))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. False is the Correct Term.");
								  }
								  else
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Correct!");
								  }
								  if(!PlayWindow.validEntry(response))
									  response="Blank";
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 1 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 1 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
							  }
							  if(k==5)
							  {
								  response = JOptionPane.showInputDialog(gameFrame, "True or False: The key aspect of the "
								  		+ "slave debate was not racial equality but westward expansion.");
								  
								  if(!PlayWindow.validEntry(response))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. True is the Correct Term.");
								  }
								  else if(!response.equalsIgnoreCase("true"))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. True is the Correct Term.");
								  }
								  else
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Correct!");
								  }
								  if(!PlayWindow.validEntry(response))
									  response="Blank";
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 1 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 1 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
							  }
							  if(k==6)
							  {
								  response = JOptionPane.showInputDialog(gameFrame, "John C. Calhoun wrote in his essay "
								  		+ "that states should have the ability to d______ laws they found unconstitutional.");
								  
								  if(!PlayWindow.validEntry(response))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Disregard is the Correct Term.");
								  }
								  else if(!response.equalsIgnoreCase("disregard"))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Disregard is the Correct Term.");
								  }
								  else
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Correct!");
								  }
								  if(!PlayWindow.validEntry(response))
									  response="Blank";
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 1 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 1 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
							  }
							  if(k==7)
							  {
								  response = JOptionPane.showInputDialog(gameFrame, "The South thought their e_____ would collapse without slavery. ");
								  
								  if(!PlayWindow.validEntry(response))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Economy is the Correct Term.");
								  }
								  else if(!response.equalsIgnoreCase("economy"))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Economy is the Correct Term.");
								  }
								  else
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Correct!");
								  }
								  if(!PlayWindow.validEntry(response))
									  response="Blank";
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 1 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 1 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
							  }
							  if(k==8)
							  {
								  response = JOptionPane.showInputDialog(gameFrame, "True or False: The states themselves are the ones who created the Constitution.");
									  
								  if(!PlayWindow.validEntry(response))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. True is the Correct Term.");
								  }
								  else if(!response.equalsIgnoreCase("true"))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. True is the Correct Term.");
								  }
								  else
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Correct!");
								  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
									  
									  
									  
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 1 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 1 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
							  }
							  if(k==9)
							  {
								  response = JOptionPane.showInputDialog(gameFrame, "America’s independence from _______"
								  		+ " caused its social renaissance in Antebellum years.");
								  
								  if(!PlayWindow.validEntry(response))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Britain is the Correct Term.");
								  }
								  else if(!response.equalsIgnoreCase("britain"))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Britain is the Correct Term.");
								  }
								  else
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Correct!");
								  }
								  if(!PlayWindow.validEntry(response))
									  response="Blank";
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 1 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 1 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
							  }
							  
							  
						  }
						  count++;
						  //increment count after loop here so it happens only once in big quiz
						  
							  //write student answer to data.txt above
					  }
					  
					  try {
							File fileToBeModified = new File("incidentals/users.txt");
							File fileToBeModified2 = new File("incidentals/users.txt");
							//BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified2));
							BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified));
							StringBuffer oldString = new StringBuffer("");
							String line, target1;
							while ((line = reader.readLine()) != null) {
								
								if(line.contains("Username: " + playerName + " "))
								{
									line = line.trim();
									target1 = line.substring(line.indexOf("Last Slide: "));
									System.out.println("tgt1 " +target1);
									line = line.replace(target1, "Last Slide: " + (count+  0));
									System.out.println("line "+ line);
									
								}
								oldString.append(line);
								if(line.length()>3)
									oldString.append("\n");
							}
							
							reader.close();
							BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified2));
							theBR.write(oldString.toString());
							theBR.close();
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					  
					  if(count != 23 && count != 3 && count != 6 && count != 9
							  && count != 12 && count != 15 && count != 18 && count != 20 && count != 22) { //so it will save at battlestations screen until next call
						  count++;
					  }
					  else if((count == 3 && responded[0]==true) || (count == 6 && responded[1]==true) || (count == 9 && responded[2]==true) ||
							  (count == 12 && responded[3]==true) || (count == 15 && responded[4]==true) || (count == 18 && responded[5]==true) || (count == 20 && responded[6]==true))
					  {
						  count++;
						  //incrementing after valid response, not after hitting continue button
					  }
					  
					  if(count == 23)
					  {
						  gameFrame.dispose();
						  PlayWindow.battleScene(powerUp, playerName, 1);
					  }
					  
				  }
				  
				  System.out.println("Count is equal to " + count);
			  }
		});
			  
			
		
		
		}
		else if(slide>=24 && slide < 44)
		{
			ImageIcon[] imgSet = new ImageIcon[20];
			boolean[] responded = new boolean[5];
			responded[0]=false;
			responded[1]=false;
			responded[2]=false;
			responded[3]=false;
			responded[4]=false;

			
			String extension;
			
			BufferedImage img5 = null;
			try {
			    img5 = ImageIO.read(new File("images/risingTensions.png"));
			} catch (IOException e) {
			    e.printStackTrace();
			}
			
			Image dimg5 = img5.getScaledInstance(imagePanel.getWidth(), imagePanel.getHeight(),
			        Image.SCALE_SMOOTH);
			
			
			imageLabel.setIcon(new ImageIcon(dimg5));
			imagePanel.add(imageLabel);
			
			//start image write
			for(int i = 24; i < 44; i++) {
				BufferedImage img0 = null;
				if(i==42)
					extension=".jpg";
				else
					extension=".png";
					
				try {
				    img0 = ImageIO.read(new File("images/"+(i+"")+extension));
				} catch (IOException e) {
				    e.printStackTrace();
				}
				
				Image dimg0 = img0.getScaledInstance(imagePanel.getWidth(), imagePanel.getHeight(),
				        Image.SCALE_SMOOTH);
				
				
				imgSet[i-24]=new ImageIcon(dimg0);
				
				//imageLabel.setIcon(imgSet[0]);
			}
			//end image write
			
			//imageLabel.setIcon(imgSet[0]);
			imagePanel.add(imageLabel, BorderLayout.NORTH);
			
			buttonPanel.add(continueButton);
			buttonPanel.add(logoutButton);
			
			//testing images folder array write
			
			
			
			//end test image folder array write
			
			continueButton.addActionListener(new ActionListener() {
				int count = slide-24;
				boolean powerUp = false;
				String response;
				  public void actionPerformed(ActionEvent event) {
				    //do whatever should happen when the button is clicked...
					  
					  
					  
					  
					  //testing battle scene if statement at count==24
					  
					  //testing imgset up here instead of below entire if else block
					  if(count < imgSet.length) 
						  imageLabel.setIcon(imgSet[count]);
						  
					  if(count==3 && !responded[0])
					  {
						  response = JOptionPane.showInputDialog(gameFrame, "The Abolitionist John ______ reignited the "
						  		+ "slavery debate with his attack on Harpers Ferry in 1859.");
						  if(!PlayWindow.validEntry(response))
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Please enter a valid response.");
						  }
						  else if(!response.equalsIgnoreCase("Brown"))
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Brown is the Correct Term.");
						  }
						  else
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Correct!");
						  }
						  
						  if(PlayWindow.validEntry(response))
						  {
							  responded[0]=true;
							  try {
									File fileToBeModified3 = new File("incidentals/data.txt");
									BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
									StringBuffer newString = new StringBuffer("");
									String line;
									while ((line = reader.readLine()) != null) {
										if(line.contains("End of user " + playerName + "'s records."))
										{
								
											newString.append(playerName + "'s Answer to Review Question 8: " + response + 
													"\n\nEnd of user " + playerName + "'s records.\n");							
										}
										else if(!line.contains(playerName + "'s Answer to Review Question 8:")) {
								
											newString.append(line);
											if(line.length()>3)
												newString.append("\n");
											if(line.contains("Student records for") || line.contains("End of user"))
												newString.append("\n");
											if(line.contains("End of user"))
												newString.append("\n\n");
											
										}
									
									}
									reader.close();
									BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
									theBR.write(newString.toString());
									theBR.close();
									
								} catch (Exception e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
						  }
							  //write student answer to data.txt above
					  }
					  else if(count==6 && !responded[1])
					  {
						  response = JOptionPane.showInputDialog(gameFrame, "The biggest distinction "
						  		+ "between Republicans and Democrats was their stance on _______");
						  if(!PlayWindow.validEntry(response))
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Please enter a valid response.");
						  }
						  else if(!response.equalsIgnoreCase("Slavery"))
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Slavery is the Correct Term.");
						  }
						  else
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Correct!");
						  }
						  
						  if(PlayWindow.validEntry(response))
						  {
							  responded[1]=true;
							  try {
									File fileToBeModified3 = new File("incidentals/data.txt");
									BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
									StringBuffer newString = new StringBuffer("");
									String line;
									while ((line = reader.readLine()) != null) {
										if(line.contains("End of user " + playerName + "'s records."))
										{
								
											newString.append(playerName + "'s Answer to Review Question 9: " + response + 
													"\n\nEnd of user " + playerName + "'s records.\n");							
										}
										else if(!line.contains(playerName + "'s Answer to Review Question 9:")) {
								
											newString.append(line);
											if(line.length()>3)
												newString.append("\n");
											if(line.contains("Student records for") || line.contains("End of user"))
												newString.append("\n");
											if(line.contains("End of user"))
												newString.append("\n\n");
											
										}
									
									}
									reader.close();
									BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
									theBR.write(newString.toString());
									theBR.close();
									
								} catch (Exception e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
						  }
							  //write student answer to data.txt above
					  }
					  else if(count==9 && !responded[2])
					  {
						  response = JOptionPane.showInputDialog(gameFrame, "True or False: Lincoln was "
						  		+ "not listed on the ballots in many Southern States.");
						  if(!PlayWindow.validEntry(response))
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Please enter a valid response.");
						  }
						  else if(!response.equalsIgnoreCase("True"))
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. True is the Correct Term.");
						  }
						  else
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Correct!");
						  }
						  
						  if(PlayWindow.validEntry(response))
						  {
							  responded[2]=true;
							  try {
									File fileToBeModified3 = new File("incidentals/data.txt");
									BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
									StringBuffer newString = new StringBuffer("");
									String line;
									while ((line = reader.readLine()) != null) {
										if(line.contains("End of user " + playerName + "'s records."))
										{
								
											newString.append(playerName + "'s Answer to Review Question 10: " + response + 
													"\n\nEnd of user " + playerName + "'s records.\n");							
										}
										else if(!line.contains(playerName + "'s Answer to Review Question 10:")) {
								
											newString.append(line);
											if(line.length()>3)
												newString.append("\n");
											if(line.contains("Student records for") || line.contains("End of user"))
												newString.append("\n");
											if(line.contains("End of user"))
												newString.append("\n\n");
											
										}
									
									}
									reader.close();
									BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
									theBR.write(newString.toString());
									theBR.close();
									
								} catch (Exception e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
						  }
							  //write student answer to data.txt above
					  }
					  else if(count==12 && !responded[3])
					  {
						  response = JOptionPane.showInputDialog(gameFrame, "True or False: After South "
						  		+ "Carolina seceded from the Union, Kentucky, Ohio, and many others did the same.");
						  if(!PlayWindow.validEntry(response))
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Please enter a valid response.");
						  }
						  else if(!response.equalsIgnoreCase("False"))
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. False is the Correct Term.");
						  }
						  else
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Correct!");
						  }
						  
						  if(PlayWindow.validEntry(response))
						  {
							  responded[3]=true;
							  try {
									File fileToBeModified3 = new File("incidentals/data.txt");
									BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
									StringBuffer newString = new StringBuffer("");
									String line;
									while ((line = reader.readLine()) != null) {
										if(line.contains("End of user " + playerName + "'s records."))
										{
								
											newString.append(playerName + "'s Answer to Review Question 11: " + response + 
													"\n\nEnd of user " + playerName + "'s records.\n");							
										}
										else if(!line.contains(playerName + "'s Answer to Review Question 11:")) {
								
											newString.append(line);
											if(line.length()>3)
												newString.append("\n");
											if(line.contains("Student records for") || line.contains("End of user"))
												newString.append("\n");
											if(line.contains("End of user"))
												newString.append("\n\n");
											
										}
									
									}
									reader.close();
									BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
									theBR.write(newString.toString());
									theBR.close();
									
								} catch (Exception e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
						  }
							  //write student answer to data.txt above
					  }
					  else if(count==16 && !responded[4])
					  {
						  response = JOptionPane.showInputDialog(gameFrame, "Who was the Confederate "
						  		+ "President at the time of Lincoln’s Union Presidency? ");
						  if(!PlayWindow.validEntry(response))
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Please enter a valid response.");
						  }
						  else if(!response.equalsIgnoreCase("Jefferson Davis"))
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Jefferson Davis"
							  		+ " is the Correct Term.");
						  }
						  else
						  {
							  JOptionPane.showMessageDialog(gameFrame, "Correct!");
						  }
						  
						  if(PlayWindow.validEntry(response))
						  {
							  responded[4]=true;
							  try {
									File fileToBeModified3 = new File("incidentals/data.txt");
									BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
									StringBuffer newString = new StringBuffer("");
									String line;
									while ((line = reader.readLine()) != null) {
										if(line.contains("End of user " + playerName + "'s records."))
										{
								
											newString.append(playerName + "'s Answer to Review Question 12: " + response + 
													"\n\nEnd of user " + playerName + "'s records.\n");							
										}
										else if(!line.contains(playerName + "'s Answer to Review Question 12:")) {
								
											newString.append(line);
											if(line.length()>3)
												newString.append("\n");
											if(line.contains("Student records for") || line.contains("End of user"))
												newString.append("\n");
											if(line.contains("End of user"))
												newString.append("\n\n");
											
										}
									
									}
									reader.close();
									BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
									theBR.write(newString.toString());
									theBR.close();
									
								} catch (Exception e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
						  }
							  //write student answer to data.txt above
					  }
					  
					  else if(count == 18)
					  {
						  for (int k = 0; k < 11; k++)
						  {
							  if(k==0)
							  {
								  response = JOptionPane.showInputDialog(gameFrame, "The Democratic candidate in the"
								  		+ " presidential race of 1860 was John C. ________ ");
								  
								  if(!PlayWindow.validEntry(response))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Calhoun is the Correct Term.");
								  }
								  else if(!response.equalsIgnoreCase("calhoun"))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Calhoun is the Correct Term.");
								  }
								  else
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Correct!");
								  }
								  if(!PlayWindow.validEntry(response))
									  response="Blank";
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 2 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 2 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
							  }
							  if(k==1)
							  {
								  response = JOptionPane.showInputDialog(gameFrame, "True or False: President Lincoln won "
								  		+ "more electoral votes that all other candidates combined.");
								  
								  if(!PlayWindow.validEntry(response))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. True is the Correct Term.");
								  }
								  else if(!response.equalsIgnoreCase("true"))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. True is the Correct Term.");
								  }
								  else
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Correct!");
								  }
								  if(!PlayWindow.validEntry(response))
									  response="Blank";
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 2 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 2 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
							  }
							  if(k==2)
							  {
								  response = JOptionPane.showInputDialog(gameFrame, "Were Democrats or Republicans pro slavery?");
								  
								  if(!PlayWindow.validEntry(response))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Democrats is the Correct Term.");
								  }
								  else if(!response.equalsIgnoreCase("democrats"))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Democrats is the Correct Term.");
								  }
								  else
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Correct!");
								  }
								  if(!PlayWindow.validEntry(response))
									  response="Blank";
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 2 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 2 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
							  }
							  if(k==3)
							  {
								  response = JOptionPane.showInputDialog(gameFrame, "How was John Brown killed? Enter A for"
								  		+ " gunfire, B for disease, C for suicide, or D for hanging. ");
								  
								  if(!PlayWindow.validEntry(response))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. D for Hanging is the Correct Term.");
								  }
								  else if(!response.equalsIgnoreCase("d"))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. D for Hanging is the Correct Term.");
								  }
								  else
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Correct!");
								  }
								  if(!PlayWindow.validEntry(response))
									  response="Blank";
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 2 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 2 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
							  }
							  if(k==4)
							  {
								  response = JOptionPane.showInputDialog(gameFrame, "How many seceded states joined South Carolina"
								  		+ " by 1861? Enter a digit 1-10.");
								  
								  if(!PlayWindow.validEntry(response))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. 10 is the Correct Term.");
								  }
								  else if(!response.equalsIgnoreCase("10"))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. 10 is the Correct Term.");
								  }
								  else
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Correct!");
								  }
								  if(!PlayWindow.validEntry(response))
									  response="Blank";
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 2 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 2 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
							  }
							  if(k==5)
							  {
								  response = JOptionPane.showInputDialog(gameFrame, "True or False: John Brown succeeded"
								  		+ " in getting slaves to rise up against their masters.");
								  
								  if(!PlayWindow.validEntry(response))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. False is the Correct Term.");
								  }
								  else if(!response.equalsIgnoreCase("false"))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. False is the Correct Term.");
								  }
								  else
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Correct!");
								  }
								  if(!PlayWindow.validEntry(response))
									  response="Blank";
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 2 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 2 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
							  }
							  if(k==6)
							  {
								  response = JOptionPane.showInputDialog(gameFrame, "True or False: secession was a campaign"
								  		+ " promise of many Democratic candidates in 1860.");
								  
								  if(!PlayWindow.validEntry(response))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. False is the Correct Term.");
								  }
								  else if(!response.equalsIgnoreCase("false"))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. False is the Correct Term.");
								  }
								  else
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Correct!");
								  }
								  if(!PlayWindow.validEntry(response))
									  response="Blank";
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 2 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 2 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
							  }
							  if(k==7)
							  {
								  response = JOptionPane.showInputDialog(gameFrame, "True or False: secession was illegal.");
								  
								  if(!PlayWindow.validEntry(response))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. True is the Correct Term.");
								  }
								  else if(!response.equalsIgnoreCase("true"))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. True is the Correct Term.");
								  }
								  else
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Correct!");
								  }
								  if(!PlayWindow.validEntry(response))
									  response="Blank";
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 2 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 2 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
							  }
							  if(k==8)
							  {
								  response = JOptionPane.showInputDialog(gameFrame, "True or False: President Jefferson "
								  		+ "Davis was willing to initiate violence while President Lincoln was not.");
								  
								  if(!PlayWindow.validEntry(response))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. True is the Correct Term.");
								  }
								  else if(!response.equalsIgnoreCase("true"))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. True is the Correct Term.");
								  }
								  else
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Correct!");
								  }
								  if(!PlayWindow.validEntry(response))
									  response="Blank";
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 2 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 2 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
							  }
							  if(k==9)
							  {
								  response = JOptionPane.showInputDialog(gameFrame, "Which side won the Battle of Fort "
								  		+ "Sumter? Confederate or Union? ");
								  
								  if(!PlayWindow.validEntry(response))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Confederate is the Correct Term.");
								  }
								  else if(!response.equalsIgnoreCase("confederate"))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Confederate is the Correct Term.");
								  }
								  else
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Correct!");
								  }
								  if(!PlayWindow.validEntry(response))
									  response="Blank";
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 2 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 2 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
							  }
							  if(k==10)
							  {
								  response = JOptionPane.showInputDialog(gameFrame, "The Battle of Fort Sumter caused President"
								  		+ " Lincoln to recruit approximately how many military volunteers? Enter A for 25000, "
								  		+ "B for 50000, C for 75000, or D for 100000.");
								  
								  if(!PlayWindow.validEntry(response))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. C for 75000 is the Correct Term.");
								  }
								  else if(!response.equalsIgnoreCase("c"))
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. C for 75000 is the Correct Term.");
								  }
								  else
								  {
									  JOptionPane.showMessageDialog(gameFrame, "Correct!");
								  }
								  if(!PlayWindow.validEntry(response))
									  response="Blank";
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 2 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 2 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
							  }
						  }
						  count++;
					  } 
					  
					  try {
							File fileToBeModified = new File("incidentals/users.txt");
							File fileToBeModified2 = new File("incidentals/users.txt");
							//BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified2));
							BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified));
							StringBuffer oldString = new StringBuffer("");
							String line, target1;
							while ((line = reader.readLine()) != null) {
								
								if(line.contains("Username: " + playerName + " "))
								{
									line = line.trim();
									target1 = line.substring(line.indexOf("Last Slide: "));
									System.out.println("tgt1 " +target1);
									line = line.replace(target1, "Last Slide: " + (count+  24)); //i think 24 is the right offset
									System.out.println("line "+ line);
									
								}
								oldString.append(line);
								if(line.length()>3)
									oldString.append("\n");
							}
							
							reader.close();
							BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified2));
							theBR.write(oldString.toString());
							theBR.close();
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					  
					  if(count != 19 && count != 3 && count != 6 && count != 9
							  && count != 12 && count != 16 && count != 18) { //so it will save at battlestations screen until next call
						  count++;
					  }
					  else if((count == 3 && responded[0]==true) || (count == 6 && responded[1]==true) || (count == 9 && responded[2]==true) ||
							  (count == 12 && responded[3]==true) || (count == 16 && responded[4]==true))
					  {
						  count++;
						  //incrementing after valid response, not after hitting continue button
					  }
					  
					  
					  
					  if(count==19) {
						  gameFrame.dispose();
						  PlayWindow.battleScene(powerUp, playerName, 2);
					  }
					  
					  //moving this to test quiz to slide order
					  //else if(count < imgSet.length) 
						//  imageLabel.setIcon(imgSet[count]);
						  
					  
					  //count++;
					  System.out.println("Count is equal to " + count);
				  }

				});
		}
			else if(slide>=44 && slide < 63)
			{
				ImageIcon[] imgSet = new ImageIcon[19];
				boolean[] responded = new boolean[3];
				responded[0]=false;
				responded[1] = false;
				responded[2]=false;
						
				
				String extension;
				
				BufferedImage img6 = null;
				try {
				    img6 = ImageIO.read(new File("images/lincolnsImpact.png"));
				} catch (IOException e) {
				    e.printStackTrace();
				}
				
				Image dimg6 = img6.getScaledInstance(imagePanel.getWidth(), imagePanel.getHeight(),
				        Image.SCALE_SMOOTH);
				
				
				imageLabel.setIcon(new ImageIcon(dimg6));
				imagePanel.add(imageLabel);
				
				//start image write
				for(int i = 44; i < 63; i++) {
					BufferedImage img0 = null;
					if(i==61)
						extension=".jpg";
					else
						extension=".png";
						
					try {
					    img0 = ImageIO.read(new File("images/"+(i+"")+extension));
					} catch (IOException e) {
					    e.printStackTrace();
					}
					
					Image dimg0 = img0.getScaledInstance(imagePanel.getWidth(), imagePanel.getHeight(),
					        Image.SCALE_SMOOTH);
					
					
					imgSet[i-44]=new ImageIcon(dimg0);
					
					//imageLabel.setIcon(imgSet[0]);
				}
				//end image write
				
				//imageLabel.setIcon(imgSet[0]);
				imagePanel.add(imageLabel, BorderLayout.NORTH);
				
				buttonPanel.add(continueButton);
				buttonPanel.add(logoutButton);
				
				//testing images folder array write
				
				
				
				//end test image folder array write
				continueButton.addActionListener(new ActionListener() {
					int count = slide-44;
					boolean powerUp = false;
					String response;
					  public void actionPerformed(ActionEvent event) {
					    //do whatever should happen when the button is clicked...
						  
						  
						  
						  
						  //testing battle scene if statement at count==24
						  
						  //testing imgset up here instead of below entire if else block
						  if(count < imgSet.length) 
							  imageLabel.setIcon(imgSet[count]);
							  
						  
						  if(count==3 && !responded[0])
						  {
							  response = JOptionPane.showInputDialog(gameFrame, "True or False: West "
							  		+ "Virginia left Virginia to join the Union.");
							  if(!PlayWindow.validEntry(response))
							  {
								  responded[0]=false;
								  JOptionPane.showMessageDialog(gameFrame, "Please enter a valid response.");
							  }
							  else if(!response.equalsIgnoreCase("true"))
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. True is the Correct Term.");
							  }
							  else
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Correct!");
							  }
							  
							  if(PlayWindow.validEntry(response))
							  {
								  responded[0]=true;
								  try {
										File fileToBeModified3 = new File("incidentals/data.txt");
										BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
										StringBuffer newString = new StringBuffer("");
										String line;
										while ((line = reader.readLine()) != null) {
											if(line.contains("End of user " + playerName + "'s records."))
											{
									
												newString.append(playerName + "'s Answer to Review Question 13: " + response + 
														"\n\nEnd of user " + playerName + "'s records.\n");							
											}
											else if(!line.contains(playerName + "'s Answer to Review Question 13:")) {
									
												newString.append(line);
												if(line.length()>3)
													newString.append("\n");
												if(line.contains("Student records for") || line.contains("End of user"))
													newString.append("\n");
												if(line.contains("End of user"))
													newString.append("\n\n");
												
											}
										
										}
										reader.close();
										BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
										theBR.write(newString.toString());
										theBR.close();
										
									} catch (Exception e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
							  }
								  //write student answer to data.txt above
						  }
						  else if(count==8 && !responded[1])
						  {
							  response = JOptionPane.showInputDialog(gameFrame, "What border state would have "
							  		+ "left Washington D.C. surrounded by Confederate states if it had seceded?");
							  if(!PlayWindow.validEntry(response))
							  {
								  responded[1]=false;
								  JOptionPane.showMessageDialog(gameFrame, "Please enter a valid response.");
							  }
							  else if(!response.equalsIgnoreCase("Maryland"))
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Maryland is the Correct Term.");
							  }
							  else
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Correct!");
							  }
							  
							  if(PlayWindow.validEntry(response))
							  {
								  responded[1]=true;
								  try {
										File fileToBeModified3 = new File("incidentals/data.txt");
										BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
										StringBuffer newString = new StringBuffer("");
										String line;
										while ((line = reader.readLine()) != null) {
											if(line.contains("End of user " + playerName + "'s records."))
											{
									
												newString.append(playerName + "'s Answer to Review Question 14: " + response + 
														"\n\nEnd of user " + playerName + "'s records.\n");							
											}
											else if(!line.contains(playerName + "'s Answer to Review Question 14:")) {
									
												newString.append(line);
												if(line.length()>3)
													newString.append("\n");
												if(line.contains("Student records for") || line.contains("End of user"))
													newString.append("\n");
												if(line.contains("End of user"))
													newString.append("\n\n");
												
											}
										
										}
										reader.close();
										BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
										theBR.write(newString.toString());
										theBR.close();
										
									} catch (Exception e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
							  }
								  //write student answer to data.txt above
						  }
						  else if(count==13 && !responded[2])
						  {
							  response = JOptionPane.showInputDialog(gameFrame, "True or False: Abraham Lincoln "
							  		+ "was known for being a completely honest and legally legitimate leader. ");
							  if(!PlayWindow.validEntry(response))
							  {
								  responded[2]=false;
								  JOptionPane.showMessageDialog(gameFrame, "Please enter a valid response.");
							  }
							  else if(!response.equalsIgnoreCase("false"))
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. False is the Correct Term.");
							  }
							  else
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Correct!");
							  }
							  
							  if(PlayWindow.validEntry(response))
							  {
								  responded[2]=true;
								  try {
										File fileToBeModified3 = new File("incidentals/data.txt");
										BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
										StringBuffer newString = new StringBuffer("");
										String line;
										while ((line = reader.readLine()) != null) {
											if(line.contains("End of user " + playerName + "'s records."))
											{
									
												newString.append(playerName + "'s Answer to Review Question 15: " + response + 
														"\n\nEnd of user " + playerName + "'s records.\n");							
											}
											else if(!line.contains(playerName + "'s Answer to Review Question 15:")) {
									
												newString.append(line);
												if(line.length()>3)
													newString.append("\n");
												if(line.contains("Student records for") || line.contains("End of user"))
													newString.append("\n");
												if(line.contains("End of user"))
													newString.append("\n\n");
												
											}
										
										}
										reader.close();
										BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
										theBR.write(newString.toString());
										theBR.close();
										
									} catch (Exception e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
							  }
								  //write student answer to data.txt above
						  }
						  else if(count==17) //big boy quiz here
						  {
							  for(int k = 0; k < 10; k ++) {
								  if(k == 0)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "Radical ______ wanted President"
									  		+ " Lincoln to go harder on the South. ");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Republicans is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("republicans"))
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Republicans is the Correct Term.");
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 3 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 3 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
									  
								  }
								  if(k==1)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "Peace _______ wanted President"
									  		+ " Lincoln to relax his wartime stance. ");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Democrats is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("democrats"))
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Democrats is the Correct Term.");
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 3 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 3 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
								  }
								  if(k==2)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "True or False: Missouri was one of the "
									  		+ "original seceding states.");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. False is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("false"))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. False is the Correct Term.");
									  }
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
											  
											  try {
													File fileToBeModified3 = new File("incidentals/data.txt");
													BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
													StringBuffer newString = new StringBuffer("");
													String line;
													while ((line = reader.readLine()) != null) {
														if(line.contains("End of user " + playerName + "'s records."))
														{								
															newString.append(playerName + "'s Answer to Quiz 3 Question " + (k+1) + ": " + response + 
																	"\n\nEnd of user " + playerName + "'s records.\n\n");							
														}
														else if(!line.contains(playerName + "'s Answer to Quiz 3 Question " + (k+1) + ":")) {
												
															newString.append(line);
															if(line.length()>3)
																newString.append("\n");
															if(line.contains("Student records for") || line.contains("End of user"))
																newString.append("\n");
															if(line.contains("End of user"))
																newString.append("\n\n");
															
														}
													
													}
													reader.close();
													BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
													theBR.write(newString.toString());
													theBR.close();
													
												} catch (Exception e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
										  
											  //write student answer to data.txt above
								  }
								  if(k==3)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "The bloodiest battle of the Civil War was"
									  		+ " the Battle of ________ ");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Gettysburg is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("gettysburg"))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Gettysburg is the Correct Term.");
									  }
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
									  
											  try {
													File fileToBeModified3 = new File("incidentals/data.txt");
													BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
													StringBuffer newString = new StringBuffer("");
													String line;
													while ((line = reader.readLine()) != null) {
														if(line.contains("End of user " + playerName + "'s records."))
														{								
															newString.append(playerName + "'s Answer to Quiz 3 Question " + (k+1) + ": " + response + 
																	"\n\nEnd of user " + playerName + "'s records.\n\n");							
														}
														else if(!line.contains(playerName + "'s Answer to Quiz 3 Question " + (k+1) + ":")) {
												
															newString.append(line);
															if(line.length()>3)
																newString.append("\n");
															if(line.contains("Student records for") || line.contains("End of user"))
																newString.append("\n");
															if(line.contains("End of user"))
																newString.append("\n\n");
															
														}
													
													}
													reader.close();
													BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
													theBR.write(newString.toString());
													theBR.close();
													
												} catch (Exception e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
										  
											  //write student answer to data.txt above
								  }
								  if(k==4)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "Which side won the battle of Gettysburg?"
									  		+ " The Union or the Confederates?");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Union is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("union"))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Union is the Correct Term.");
									  }
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
											  
											  try {
													File fileToBeModified3 = new File("incidentals/data.txt");
													BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
													StringBuffer newString = new StringBuffer("");
													String line;
													while ((line = reader.readLine()) != null) {
														if(line.contains("End of user " + playerName + "'s records."))
														{								
															newString.append(playerName + "'s Answer to Quiz 3 Question " + (k+1) + ": " + response + 
																	"\n\nEnd of user " + playerName + "'s records.\n\n");							
														}
														else if(!line.contains(playerName + "'s Answer to Quiz 3 Question " + (k+1) + ":")) {
												
															newString.append(line);
															if(line.length()>3)
																newString.append("\n");
															if(line.contains("Student records for") || line.contains("End of user"))
																newString.append("\n");
															if(line.contains("End of user"))
																newString.append("\n\n");
															
														}
													
													}
													reader.close();
													BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
													theBR.write(newString.toString());
													theBR.close();
													
												} catch (Exception e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
										  
											  //write student answer to data.txt above
								  }
								  if(k==5)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "Roughly how many casualties resulted"
									  		+ " from the Battle of Gettysburg? Enter A for 25000, "
									  		+ "B for 50000, C for 75000, or D for 100000.");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. B for 50000 is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("b"))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. B for 50000 is the Correct Term.");
									  }
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
											  
											  try {
													File fileToBeModified3 = new File("incidentals/data.txt");
													BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
													StringBuffer newString = new StringBuffer("");
													String line;
													while ((line = reader.readLine()) != null) {
														if(line.contains("End of user " + playerName + "'s records."))
														{								
															newString.append(playerName + "'s Answer to Quiz 3 Question " + (k+1) + ": " + response + 
																	"\n\nEnd of user " + playerName + "'s records.\n\n");							
														}
														else if(!line.contains(playerName + "'s Answer to Quiz 3 Question " + (k+1) + ":")) {
												
															newString.append(line);
															if(line.length()>3)
																newString.append("\n");
															if(line.contains("Student records for") || line.contains("End of user"))
																newString.append("\n");
															if(line.contains("End of user"))
																newString.append("\n\n");
															
														}
													
													}
													reader.close();
													BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
													theBR.write(newString.toString());
													theBR.close();
													
												} catch (Exception e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
										  
											  //write student answer to data.txt above
								  }
								  if(k==6)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "The prominent General of the Confederate "
									  		+ "Army in 1863 had a last name of _____");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Lee is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("lee"))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Lee is the Correct Term.");
									  }
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
											  
											  try {
													File fileToBeModified3 = new File("incidentals/data.txt");
													BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
													StringBuffer newString = new StringBuffer("");
													String line;
													while ((line = reader.readLine()) != null) {
														if(line.contains("End of user " + playerName + "'s records."))
														{								
															newString.append(playerName + "'s Answer to Quiz 3 Question " + (k+1) + ": " + response + 
																	"\n\nEnd of user " + playerName + "'s records.\n\n");							
														}
														else if(!line.contains(playerName + "'s Answer to Quiz 3 Question " + (k+1) + ":")) {
												
															newString.append(line);
															if(line.length()>3)
																newString.append("\n");
															if(line.contains("Student records for") || line.contains("End of user"))
																newString.append("\n");
															if(line.contains("End of user"))
																newString.append("\n\n");
															
														}
													
													}
													reader.close();
													BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
													theBR.write(newString.toString());
													theBR.close();
													
												} catch (Exception e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
										  
											  //write student answer to data.txt above
								  }
								  if(k==7)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "In 1861, President Lincoln declared "
									  		+ "Martial Law in what state? Enter A for Maryland,"
									  		+ " B for Kansas, C for Ohio, or D for Massachussets.");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. A for Maryland is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("a"))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. A for Maryland is the Correct Term.");
									  }
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
											  
											  try {
													File fileToBeModified3 = new File("incidentals/data.txt");
													BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
													StringBuffer newString = new StringBuffer("");
													String line;
													while ((line = reader.readLine()) != null) {
														if(line.contains("End of user " + playerName + "'s records."))
														{								
															newString.append(playerName + "'s Answer to Quiz 3 Question " + (k+1) + ": " + response + 
																	"\n\nEnd of user " + playerName + "'s records.\n\n");							
														}
														else if(!line.contains(playerName + "'s Answer to Quiz 3 Question " + (k+1) + ":")) {
												
															newString.append(line);
															if(line.length()>3)
																newString.append("\n");
															if(line.contains("Student records for") || line.contains("End of user"))
																newString.append("\n");
															if(line.contains("End of user"))
																newString.append("\n\n");
															
														}
													
													}
													reader.close();
													BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
													theBR.write(newString.toString());
													theBR.close();
													
												} catch (Exception e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
										  
											  //write student answer to data.txt above
								  }
								  if(k==8)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "True or False: the Border States "
									  		+ "generally got along well with the Union.");
										  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. False is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("false"))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. False is the Correct Term.");
									  }
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
										  if(!PlayWindow.validEntry(response))
											  response="Blank";
										  
										  
										  
											  
											  try {
													File fileToBeModified3 = new File("incidentals/data.txt");
													BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
													StringBuffer newString = new StringBuffer("");
													String line;
													while ((line = reader.readLine()) != null) {
														if(line.contains("End of user " + playerName + "'s records."))
														{								
															newString.append(playerName + "'s Answer to Quiz 3 Question " + (k+1) + ": " + response + 
																	"\n\nEnd of user " + playerName + "'s records.\n\n");							
														}
														else if(!line.contains(playerName + "'s Answer to Quiz 3 Question " + (k+1) + ":")) {
												
															newString.append(line);
															if(line.length()>3)
																newString.append("\n");
															if(line.contains("Student records for") || line.contains("End of user"))
																newString.append("\n");
															if(line.contains("End of user"))
																newString.append("\n\n");
															
														}
													
													}
													reader.close();
													BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
													theBR.write(newString.toString());
													theBR.close();
													
												} catch (Exception e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
										  
											  //write student answer to data.txt above
								  }
								  if(k==9)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "The right of detainees to be informed of why they are being held captive is referred to as the Writ de _________.");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Habeus Corpus is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("habeus corpus"))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Habeus Corpus is the Correct Term.");
									  }
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
											  
											  try {
													File fileToBeModified3 = new File("incidentals/data.txt");
													BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
													StringBuffer newString = new StringBuffer("");
													String line;
													while ((line = reader.readLine()) != null) {
														if(line.contains("End of user " + playerName + "'s records."))
														{								
															newString.append(playerName + "'s Answer to Quiz 3 Question " + (k+1) + ": " + response + 
																	"\n\nEnd of user " + playerName + "'s records.\n\n");							
														}
														else if(!line.contains(playerName + "'s Answer to Quiz 3 Question " + (k+1) + ":")) {
												
															newString.append(line);
															if(line.length()>3)
																newString.append("\n");
															if(line.contains("Student records for") || line.contains("End of user"))
																newString.append("\n");
															if(line.contains("End of user"))
																newString.append("\n\n");
															
														}
													
													}
													reader.close();
													BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
													theBR.write(newString.toString());
													theBR.close();
													
												} catch (Exception e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
										  
											  //write student answer to data.txt above
								  }
								  
								  
							  }
							  count++;
							  //increment count after loop here so it happens only once in big quiz
							  
								  //write student answer to data.txt above
						  }
						  
						  try {
								File fileToBeModified = new File("incidentals/users.txt");
								File fileToBeModified2 = new File("incidentals/users.txt");
								//BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified2));
								BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified));
								StringBuffer oldString = new StringBuffer("");
								String line, target1;
								while ((line = reader.readLine()) != null) {
									
									if(line.contains("Username: " + playerName + " "))
									{
										line = line.trim();
										target1 = line.substring(line.indexOf("Last Slide: "));
										System.out.println("tgt1 " +target1);
										line = line.replace(target1, "Last Slide: " + (count+  44)); //i think 24 is the right offset
										System.out.println("line "+ line);
										
									}
									oldString.append(line);
									if(line.length()>3)
										oldString.append("\n");
								}
								
								reader.close();
								BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified2));
								theBR.write(oldString.toString());
								theBR.close();
								
							} catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						  
						  if(count != 18 && count != 3 && count != 8 && count != 13
								  && count != 17) { //so it will save at battlestations screen until next call
							  count++;
						  }
						  else if((count == 3 && responded[0]==true) || (count == 8 && responded[1]==true) || (count == 13 && responded[2]==true))
						  {
							  count++;
							  //incrementing after valid response, not after hitting continue button
						  }
						  
						  
						  if(count==18) {
							  gameFrame.dispose();
							  PlayWindow.battleScene(powerUp, playerName, 3);
						  }
						  System.out.println("Count is equal to " + count);
					  }
				});
				
			}
		
			else if(slide>=63 && slide < 79)
			{
				ImageIcon[] imgSet = new ImageIcon[16];
				
				boolean[] responded = new boolean[3];
				responded[0]=false;
				responded[1]=false;
				responded[2]=false;
				
				String extension;
				
				BufferedImage img8 = null;
				try {
				    img8 = ImageIO.read(new File("images/desperateTimes.png"));
				} catch (IOException e) {
				    e.printStackTrace();
				}
				
				Image dimg8 = img8.getScaledInstance(imagePanel.getWidth(), imagePanel.getHeight(),
				        Image.SCALE_SMOOTH);
				
				
				imageLabel.setIcon(new ImageIcon(dimg8));
				imagePanel.add(imageLabel);
				
				//start image write
				for(int i = 63; i < 79; i++) {
					BufferedImage img0 = null;
					if(i==77)
						extension=".jpg";
					else
						extension=".png";
						
					try {
					    img0 = ImageIO.read(new File("images/"+(i+"")+extension));
					} catch (IOException e) {
					    e.printStackTrace();
					}
					
					Image dimg0 = img0.getScaledInstance(imagePanel.getWidth(), imagePanel.getHeight(),
					        Image.SCALE_SMOOTH);
					
					
					imgSet[i-63]=new ImageIcon(dimg0);
					
					//imageLabel.setIcon(imgSet[0]);
				}
				//end image write
				
				//imageLabel.setIcon(imgSet[0]);
				imagePanel.add(imageLabel, BorderLayout.NORTH);
				
				buttonPanel.add(continueButton);
				buttonPanel.add(logoutButton);
				
				//testing images folder array write
				
				
				
				
				continueButton.addActionListener(new ActionListener() {
					int count = slide-63;
					boolean powerUp = false;
					String response;
					  public void actionPerformed(ActionEvent event) {
					    //do whatever should happen when the button is clicked...
						  
						  
						  
						  
						  //testing battle scene if statement at count==24
						  
						  //testing imgset up here instead of below entire if else block
						  if(count < imgSet.length) 
							  imageLabel.setIcon(imgSet[count]);
							  
						  
						  if(count==3 && !responded[0])
						  {
							  response = JOptionPane.showInputDialog(gameFrame, "What was the Union’s highest "
							  		+ "ranking army general’s last name?" + 
							  		"");
							  if(!PlayWindow.validEntry(response))
							  {
								  responded[0]=false;
								  JOptionPane.showMessageDialog(gameFrame, "Please enter a valid response.");
							  }
							  else if(!response.equalsIgnoreCase("grant"))
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Grant is the Correct Term.");
							  }
							  else
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Correct!");
							  }
							  
							  if(PlayWindow.validEntry(response))
							  {
								  responded[0]=true;
								  try {
										File fileToBeModified3 = new File("incidentals/data.txt");
										BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
										StringBuffer newString = new StringBuffer("");
										String line;
										while ((line = reader.readLine()) != null) {
											if(line.contains("End of user " + playerName + "'s records."))
											{
									
												newString.append(playerName + "'s Answer to Review Question 16: " + response + 
														"\n\nEnd of user " + playerName + "'s records.\n");							
											}
											else if(!line.contains(playerName + "'s Answer to Review Question 16:")) {
									
												newString.append(line);
												if(line.length()>3)
													newString.append("\n");
												if(line.contains("Student records for") || line.contains("End of user"))
													newString.append("\n");
												if(line.contains("End of user"))
													newString.append("\n\n");
												
											}
										
										}
										reader.close();
										BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
										theBR.write(newString.toString());
										theBR.close();
										
									} catch (Exception e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
							  }
								  //write student answer to data.txt above
						  }
						  else if(count==7 && !responded[1])
						  {
							  response = JOptionPane.showInputDialog(gameFrame, "Limited War is different from _____ "
							  		+ "war, in which war is waged ruthlessly and without limits.");
							  if(!PlayWindow.validEntry(response))
							  {
								  responded[1]=false;
								  JOptionPane.showMessageDialog(gameFrame, "Please enter a valid response.");
							  }
							  else if(!response.equalsIgnoreCase("total"))
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Total is the Correct Term.");
							  }
							  else
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Correct!");
							  }
							  
							  if(PlayWindow.validEntry(response))
							  {
								  responded[1]=true;
								  try {
										File fileToBeModified3 = new File("incidentals/data.txt");
										BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
										StringBuffer newString = new StringBuffer("");
										String line;
										while ((line = reader.readLine()) != null) {
											if(line.contains("End of user " + playerName + "'s records."))
											{
									
												newString.append(playerName + "'s Answer to Review Question 17: " + response + 
														"\n\nEnd of user " + playerName + "'s records.\n");							
											}
											else if(!line.contains(playerName + "'s Answer to Review Question 17:")) {
									
												newString.append(line);
												if(line.length()>3)
													newString.append("\n");
												if(line.contains("Student records for") || line.contains("End of user"))
													newString.append("\n");
												if(line.contains("End of user"))
													newString.append("\n\n");
												
											}
										
										}
										reader.close();
										BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
										theBR.write(newString.toString());
										theBR.close();
										
									} catch (Exception e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
							  }
								  //write student answer to data.txt above
						  }
						  else if(count==11 && !responded[2])
						  {
							  response = JOptionPane.showInputDialog(gameFrame, "What was the last name of "
							  		+ "Abraham Lincoln’s opponent in the 1864 election? ");
							  if(!PlayWindow.validEntry(response))
							  {
								  responded[2]=false;
								  JOptionPane.showMessageDialog(gameFrame, "Please enter a valid response.");
							  }
							  else if(!response.equalsIgnoreCase("McLellan"))
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. McLellan is the Correct Term.");
							  }
							  else
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Correct!");
							  }
							  
							  if(PlayWindow.validEntry(response))
							  {
								  responded[2]=true;
								  try {
										File fileToBeModified3 = new File("incidentals/data.txt");
										BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
										StringBuffer newString = new StringBuffer("");
										String line;
										while ((line = reader.readLine()) != null) {
											if(line.contains("End of user " + playerName + "'s records."))
											{
									
												newString.append(playerName + "'s Answer to Review Question 18: " + response + 
														"\n\nEnd of user " + playerName + "'s records.\n");							
											}
											else if(!line.contains(playerName + "'s Answer to Review Question 18:")) {
									
												newString.append(line);
												if(line.length()>3)
													newString.append("\n");
												if(line.contains("Student records for") || line.contains("End of user"))
													newString.append("\n");
												if(line.contains("End of user"))
													newString.append("\n\n");
												
											}
										
										}
										reader.close();
										BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
										theBR.write(newString.toString());
										theBR.close();
										
									} catch (Exception e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
							  }
								  //write student answer to data.txt above
						  }
						  else if(count==14) //big boy quiz here
						  {
							  for(int k = 0; k < 8; k ++) {
								  if(k == 0)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "True or False: Without weapons, the "
									  		+ "citizens of the South were virtually powerless in the war.");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. False is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("false"))
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. False is the Correct Term.");
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 4 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 4 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
									  
								  }
								  if(k==1)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "What was the last name of Union General "
									  		+ "Grant’s comrade that he ordered to take a squad of troops through the Deep South?");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Sherman is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("sherman"))
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Sherman is the Correct Term.");
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 4 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 4 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
								  }
								  if(k==2)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "What was the name of the city that"
									  		+ " General Sherman burned to the ground?");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Atlanta is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("Atlanta"))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Atlanta is the Correct Term.");
									  }
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
											  
											  try {
													File fileToBeModified3 = new File("incidentals/data.txt");
													BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
													StringBuffer newString = new StringBuffer("");
													String line;
													while ((line = reader.readLine()) != null) {
														if(line.contains("End of user " + playerName + "'s records."))
														{								
															newString.append(playerName + "'s Answer to Quiz 4 Question " + (k+1) + ": " + response + 
																	"\n\nEnd of user " + playerName + "'s records.\n\n");							
														}
														else if(!line.contains(playerName + "'s Answer to Quiz 4 Question " + (k+1) + ":")) {
												
															newString.append(line);
															if(line.length()>3)
																newString.append("\n");
															if(line.contains("Student records for") || line.contains("End of user"))
																newString.append("\n");
															if(line.contains("End of user"))
																newString.append("\n\n");
															
														}
													
													}
													reader.close();
													BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
													theBR.write(newString.toString());
													theBR.close();
													
												} catch (Exception e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
										  
											  //write student answer to data.txt above
								  }
								  if(k==3)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "What city did Sherman cause to surrender"
									  		+ " after burning Atlanta? ");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Savannah is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("Savannah"))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Savannah is the Correct Term.");
									  }
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
									  
											  try {
													File fileToBeModified3 = new File("incidentals/data.txt");
													BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
													StringBuffer newString = new StringBuffer("");
													String line;
													while ((line = reader.readLine()) != null) {
														if(line.contains("End of user " + playerName + "'s records."))
														{								
															newString.append(playerName + "'s Answer to Quiz 4 Question " + (k+1) + ": " + response + 
																	"\n\nEnd of user " + playerName + "'s records.\n\n");							
														}
														else if(!line.contains(playerName + "'s Answer to Quiz 4 Question " + (k+1) + ":")) {
												
															newString.append(line);
															if(line.length()>3)
																newString.append("\n");
															if(line.contains("Student records for") || line.contains("End of user"))
																newString.append("\n");
															if(line.contains("End of user"))
																newString.append("\n\n");
															
														}
													
													}
													reader.close();
													BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
													theBR.write(newString.toString());
													theBR.close();
													
												} catch (Exception e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
										  
											  //write student answer to data.txt above
								  }
								  if(k==4)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "What presidential candidate in the 1864 "
									  		+ "election was willing to compromise with the South?");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. McLellan is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("mclellan"))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. McLellan is the Correct Term.");
									  }
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
											  
											  try {
													File fileToBeModified3 = new File("incidentals/data.txt");
													BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
													StringBuffer newString = new StringBuffer("");
													String line;
													while ((line = reader.readLine()) != null) {
														if(line.contains("End of user " + playerName + "'s records."))
														{								
															newString.append(playerName + "'s Answer to Quiz 4 Question " + (k+1) + ": " + response + 
																	"\n\nEnd of user " + playerName + "'s records.\n\n");							
														}
														else if(!line.contains(playerName + "'s Answer to Quiz 4 Question " + (k+1) + ":")) {
												
															newString.append(line);
															if(line.length()>3)
																newString.append("\n");
															if(line.contains("Student records for") || line.contains("End of user"))
																newString.append("\n");
															if(line.contains("End of user"))
																newString.append("\n\n");
															
														}
													
													}
													reader.close();
													BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
													theBR.write(newString.toString());
													theBR.close();
													
												} catch (Exception e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
										  
											  //write student answer to data.txt above
								  }
								  if(k==5)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "In what year was the battle of Appomattox Courthouse?");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. 1865 is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("1865"))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. 1865 is the Correct Term.");
									  }
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
											  
											  try {
													File fileToBeModified3 = new File("incidentals/data.txt");
													BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
													StringBuffer newString = new StringBuffer("");
													String line;
													while ((line = reader.readLine()) != null) {
														if(line.contains("End of user " + playerName + "'s records."))
														{								
															newString.append(playerName + "'s Answer to Quiz 4 Question " + (k+1) + ": " + response + 
																	"\n\nEnd of user " + playerName + "'s records.\n\n");							
														}
														else if(!line.contains(playerName + "'s Answer to Quiz 4 Question " + (k+1) + ":")) {
												
															newString.append(line);
															if(line.length()>3)
																newString.append("\n");
															if(line.contains("Student records for") || line.contains("End of user"))
																newString.append("\n");
															if(line.contains("End of user"))
																newString.append("\n\n");
															
														}
													
													}
													reader.close();
													BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
													theBR.write(newString.toString());
													theBR.close();
													
												} catch (Exception e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
										  
											  //write student answer to data.txt above
								  }
								  if(k==6)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "Which side won the battle of"
									  		+ "Appomattox Courthouse?");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Union is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("union"))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. Union is the Correct Term.");
									  }
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
											  
											  try {
													File fileToBeModified3 = new File("incidentals/data.txt");
													BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
													StringBuffer newString = new StringBuffer("");
													String line;
													while ((line = reader.readLine()) != null) {
														if(line.contains("End of user " + playerName + "'s records."))
														{								
															newString.append(playerName + "'s Answer to Quiz 4 Question " + (k+1) + ": " + response + 
																	"\n\nEnd of user " + playerName + "'s records.\n\n");							
														}
														else if(!line.contains(playerName + "'s Answer to Quiz 4 Question " + (k+1) + ":")) {
												
															newString.append(line);
															if(line.length()>3)
																newString.append("\n");
															if(line.contains("Student records for") || line.contains("End of user"))
																newString.append("\n");
															if(line.contains("End of user"))
																newString.append("\n\n");
															
														}
													
													}
													reader.close();
													BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
													theBR.write(newString.toString());
													theBR.close();
													
												} catch (Exception e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
										  
											  //write student answer to data.txt above
								  }
								  if(k==7)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "True or False: General Lee admitted "
									  		+ "confederate defeat in writing after the battle.");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. True is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("true"))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. True is the Correct Term.");
									  }
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
											  
											  try {
													File fileToBeModified3 = new File("incidentals/data.txt");
													BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
													StringBuffer newString = new StringBuffer("");
													String line;
													while ((line = reader.readLine()) != null) {
														if(line.contains("End of user " + playerName + "'s records."))
														{								
															newString.append(playerName + "'s Answer to Quiz 4 Question " + (k+1) + ": " + response + 
																	"\n\nEnd of user " + playerName + "'s records.\n\n");							
														}
														else if(!line.contains(playerName + "'s Answer to Quiz 4 Question " + (k+1) + ":")) {
												
															newString.append(line);
															if(line.length()>3)
																newString.append("\n");
															if(line.contains("Student records for") || line.contains("End of user"))
																newString.append("\n");
															if(line.contains("End of user"))
																newString.append("\n\n");
															
														}
													
													}
													reader.close();
													BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
													theBR.write(newString.toString());
													theBR.close();
													
												} catch (Exception e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
										  
											  //write student answer to data.txt above
								  }
								  
								  
								  
							  }
							  count++;
							  //increment count after loop here so it happens only once in big quiz
							  
								  //write student answer to data.txt above
						  }
						  
						  try {
								File fileToBeModified = new File("incidentals/users.txt");
								File fileToBeModified2 = new File("incidentals/users.txt");
								//BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified2));
								BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified));
								StringBuffer oldString = new StringBuffer("");
								String line, target1;
								while ((line = reader.readLine()) != null) {
									
									if(line.contains("Username: " + playerName + " "))
									{
										line = line.trim();
										target1 = line.substring(line.indexOf("Last Slide: "));
										System.out.println("tgt1 " +target1);
										line = line.replace(target1, "Last Slide: " + (count+  63)); //i think 24 is the right offset
										System.out.println("line "+ line);
										
									}
									oldString.append(line);
									if(line.length()>3)
										oldString.append("\n");
								}
								
								reader.close();
								BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified2));
								theBR.write(oldString.toString());
								theBR.close();
								
							} catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						  
						  if(count != 15 && count != 3 && count != 7 && count != 11
								  && count != 14) { //so it will save at battlestations screen until next call
							  count++;
						  }
						  else if((count == 3 && responded[0]==true) || (count == 7 && responded[1]==true) || (count == 11 && responded[2]==true))
						  {
							  count++;
							  //incrementing after valid response, not after hitting continue button
						  }
						  
						  
						  if(count==15) {
							  gameFrame.dispose();
							  PlayWindow.battleScene(powerUp, playerName, 4);
						  }
					  }
				});
				
				
				
			}
		
			else if(slide>=79 && slide < 90)
			{
				ImageIcon[] imgSet = new ImageIcon[11];
				
				boolean[] responded = new boolean[2];
				responded[0] = false;
				responded[1] = false;
				
				String extension;
				
				BufferedImage img9 = null;
				try {
				    img9 = ImageIO.read(new File("images/aftermath.png"));
				} catch (IOException e) {
				    e.printStackTrace();
				}
				
				Image dimg9 = img9.getScaledInstance(imagePanel.getWidth(), imagePanel.getHeight(),
				        Image.SCALE_SMOOTH);
				
				
				imageLabel.setIcon(new ImageIcon(dimg9));
				imagePanel.add(imageLabel);
				
				//start image write
				for(int i = 79; i < 90; i++) {
					BufferedImage img0 = null;
					if(i==88)
						extension=".jpg";
					else
						extension=".png";
						
					try {
					    img0 = ImageIO.read(new File("images/"+(i+"")+extension));
					} catch (IOException e) {
					    e.printStackTrace();
					}
					
					Image dimg0 = img0.getScaledInstance(imagePanel.getWidth(), imagePanel.getHeight(),
					        Image.SCALE_SMOOTH);
					
					
					imgSet[i-79]=new ImageIcon(dimg0);
					
					//imageLabel.setIcon(imgSet[0]);
				}
				//end image write
				
				//imageLabel.setIcon(imgSet[0]);
				imagePanel.add(imageLabel, BorderLayout.NORTH);
				
				buttonPanel.add(continueButton);
				buttonPanel.add(logoutButton);
				
				//testing images folder array write
				
				
				
				//end test image folder array write
				
				continueButton.addActionListener(new ActionListener() {
					int count = slide-79;
					boolean powerUp = false;
					String response;
					  public void actionPerformed(ActionEvent event) {
					    //do whatever should happen when the button is clicked...
						  
						  
						  
						  
						  //testing battle scene if statement at count==24
						  
						  //testing imgset up here instead of below entire if else block
						  if(count < imgSet.length) 
							  imageLabel.setIcon(imgSet[count]);
							  
						  
						  if(count==4 && !responded[0])
						  {
							  response = JOptionPane.showInputDialog(gameFrame, "Approximately how many troops died in"
							  		+ " the Civil War? Enter A for 200000, B for 400000, C for 600000, or D for 800000. ");
							  if(!PlayWindow.validEntry(response))
							  {
								  responded[0]=false;
								  JOptionPane.showMessageDialog(gameFrame, "Please enter a valid response.");
							  }
							  else if(!response.equalsIgnoreCase("c"))
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. C for 600000 is the Correct Term.");
							  }
							  else
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Correct!");
							  }
							  
							  if(PlayWindow.validEntry(response))
							  {
								  responded[0]=true;
								  try {
										File fileToBeModified3 = new File("incidentals/data.txt");
										BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
										StringBuffer newString = new StringBuffer("");
										String line;
										while ((line = reader.readLine()) != null) {
											if(line.contains("End of user " + playerName + "'s records."))
											{
									
												newString.append(playerName + "'s Answer to Review Question 19: " + response + 
														"\n\nEnd of user " + playerName + "'s records.\n");							
											}
											else if(!line.contains(playerName + "'s Answer to Review Question 19:")) {
									
												newString.append(line);
												if(line.length()>3)
													newString.append("\n");
												if(line.contains("Student records for") || line.contains("End of user"))
													newString.append("\n");
												if(line.contains("End of user"))
													newString.append("\n\n");
												
											}
										
										}
										reader.close();
										BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
										theBR.write(newString.toString());
										theBR.close();
										
									} catch (Exception e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
							  }
								  //write student answer to data.txt above
						  }
						  else if(count==6 && !responded[1])
						  {
							  response = JOptionPane.showInputDialog(gameFrame, "What was the full name of the"
							  		+ " man who assassinated Abraham Lincoln on April 15, 1965?");
							  if(!PlayWindow.validEntry(response))
							  {
								  responded[1]=false;
								  JOptionPane.showMessageDialog(gameFrame, "Please enter a valid response.");
							  }
							  else if(!response.equalsIgnoreCase("john wilkes booth"))
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. John Wilkes "
								  		+ "Booth is the Correct Term.");
							  }
							  else
							  {
								  JOptionPane.showMessageDialog(gameFrame, "Correct!");
							  }
							  
							  if(PlayWindow.validEntry(response))
							  {
								  responded[1]=true;
								  try {
										File fileToBeModified3 = new File("incidentals/data.txt");
										BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
										StringBuffer newString = new StringBuffer("");
										String line;
										while ((line = reader.readLine()) != null) {
											if(line.contains("End of user " + playerName + "'s records."))
											{
									
												newString.append(playerName + "'s Answer to Review Question 20: " + response + 
														"\n\nEnd of user " + playerName + "'s records.\n");							
											}
											else if(!line.contains(playerName + "'s Answer to Review Question 20:")) {
									
												newString.append(line);
												if(line.length()>3)
													newString.append("\n");
												if(line.contains("Student records for") || line.contains("End of user"))
													newString.append("\n");
												if(line.contains("End of user"))
													newString.append("\n\n");
												
											}
										
										}
										reader.close();
										BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
										theBR.write(newString.toString());
										theBR.close();
										
									} catch (Exception e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
							  }
								  //write student answer to data.txt above
						  }
						  
						  else if(count==9) //big boy quiz here
						  {
							  for(int k = 0; k < 7; k ++) {
								  if(k == 0)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "Approximately how many troops served "
									  		+ "in the Civil War? Enter A for 2 million, "
									  		+ "B for 2.25 million, C for 2.5 million, or D for 2.75 million.");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. D for 2.75 million is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("d"))
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. D for 2.75 million is the Correct Term.");
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 5 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 5 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
									  
								  }
								  if(k==1)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "True or False: over 20 percent of troops "
									  		+ "who served in the war perished before its end.");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. True is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("true"))
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. True is the Correct Term.");
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
										  
										  try {
												File fileToBeModified3 = new File("incidentals/data.txt");
												BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
												StringBuffer newString = new StringBuffer("");
												String line;
												while ((line = reader.readLine()) != null) {
													if(line.contains("End of user " + playerName + "'s records."))
													{								
														newString.append(playerName + "'s Answer to Quiz 5 Question " + (k+1) + ": " + response + 
																"\n\nEnd of user " + playerName + "'s records.\n\n");							
													}
													else if(!line.contains(playerName + "'s Answer to Quiz 5 Question " + (k+1) + ":")) {
											
														newString.append(line);
														if(line.length()>3)
															newString.append("\n");
														if(line.contains("Student records for") || line.contains("End of user"))
															newString.append("\n");
														if(line.contains("End of user"))
															newString.append("\n\n");
														
													}
												
												}
												reader.close();
												BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
												theBR.write(newString.toString());
												theBR.close();
												
											} catch (Exception e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									  
										  //write student answer to data.txt above
								  }
								  if(k==2)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "True or False: some believe that the war "
									  		+ "could have been avoided with better negotiation.");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. True is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("True"))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. True is the Correct Term.");
									  }
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
											  
											  try {
													File fileToBeModified3 = new File("incidentals/data.txt");
													BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
													StringBuffer newString = new StringBuffer("");
													String line;
													while ((line = reader.readLine()) != null) {
														if(line.contains("End of user " + playerName + "'s records."))
														{								
															newString.append(playerName + "'s Answer to Quiz 5 Question " + (k+1) + ": " + response + 
																	"\n\nEnd of user " + playerName + "'s records.\n\n");							
														}
														else if(!line.contains(playerName + "'s Answer to Quiz 5 Question " + (k+1) + ":")) {
												
															newString.append(line);
															if(line.length()>3)
																newString.append("\n");
															if(line.contains("Student records for") || line.contains("End of user"))
																newString.append("\n");
															if(line.contains("End of user"))
																newString.append("\n\n");
															
														}
													
													}
													reader.close();
													BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
													theBR.write(newString.toString());
													theBR.close();
													
												} catch (Exception e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
										  
											  //write student answer to data.txt above
								  }
								  if(k==3)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "True or False: President Lincoln believed "
									  		+ "in firm punishment for the South’s misbehavior after the war. ");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. False is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("false"))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. False is the Correct Term.");
									  }
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
									  
											  try {
													File fileToBeModified3 = new File("incidentals/data.txt");
													BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
													StringBuffer newString = new StringBuffer("");
													String line;
													while ((line = reader.readLine()) != null) {
														if(line.contains("End of user " + playerName + "'s records."))
														{								
															newString.append(playerName + "'s Answer to Quiz 5 Question " + (k+1) + ": " + response + 
																	"\n\nEnd of user " + playerName + "'s records.\n\n");							
														}
														else if(!line.contains(playerName + "'s Answer to Quiz 5 Question " + (k+1) + ":")) {
												
															newString.append(line);
															if(line.length()>3)
																newString.append("\n");
															if(line.contains("Student records for") || line.contains("End of user"))
																newString.append("\n");
															if(line.contains("End of user"))
																newString.append("\n\n");
															
														}
													
													}
													reader.close();
													BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
													theBR.write(newString.toString());
													theBR.close();
													
												} catch (Exception e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
										  
											  //write student answer to data.txt above
								  }
								  if(k==4)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "True or False: The North passed Black "
									  		+ "Codes after the war to keep black people in a disadvantaged position.");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. False is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("false"))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. False is the Correct Term.");
									  }
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
											  
											  try {
													File fileToBeModified3 = new File("incidentals/data.txt");
													BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
													StringBuffer newString = new StringBuffer("");
													String line;
													while ((line = reader.readLine()) != null) {
														if(line.contains("End of user " + playerName + "'s records."))
														{								
															newString.append(playerName + "'s Answer to Quiz 5 Question " + (k+1) + ": " + response + 
																	"\n\nEnd of user " + playerName + "'s records.\n\n");							
														}
														else if(!line.contains(playerName + "'s Answer to Quiz 5 Question " + (k+1) + ":")) {
												
															newString.append(line);
															if(line.length()>3)
																newString.append("\n");
															if(line.contains("Student records for") || line.contains("End of user"))
																newString.append("\n");
															if(line.contains("End of user"))
																newString.append("\n\n");
															
														}
													
													}
													reader.close();
													BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
													theBR.write(newString.toString());
													theBR.close();
													
												} catch (Exception e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
										  
											  //write student answer to data.txt above
								  }
								  if(k==5)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "True or False: President Johnson was "
									  		+ "reelected in 1869, four years after Lincoln’s assassination.");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. False is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("false"))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. False is the Correct Term.");
									  }
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
											  
											  try {
													File fileToBeModified3 = new File("incidentals/data.txt");
													BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
													StringBuffer newString = new StringBuffer("");
													String line;
													while ((line = reader.readLine()) != null) {
														if(line.contains("End of user " + playerName + "'s records."))
														{								
															newString.append(playerName + "'s Answer to Quiz 5 Question " + (k+1) + ": " + response + 
																	"\n\nEnd of user " + playerName + "'s records.\n\n");							
														}
														else if(!line.contains(playerName + "'s Answer to Quiz 5 Question " + (k+1) + ":")) {
												
															newString.append(line);
															if(line.length()>3)
																newString.append("\n");
															if(line.contains("Student records for") || line.contains("End of user"))
																newString.append("\n");
															if(line.contains("End of user"))
																newString.append("\n\n");
															
														}
													
													}
													reader.close();
													BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
													theBR.write(newString.toString());
													theBR.close();
													
												} catch (Exception e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
										  
											  //write student answer to data.txt above
								  }
								  if(k==6)
								  {
									  response = JOptionPane.showInputDialog(gameFrame, "True or False: Many consider the South’s"
									  		+ " reconstruction efforts to be a failure due to "
									  		+ "the damage losing slavery had on their economy. ");
									  
									  if(!PlayWindow.validEntry(response))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. True is the Correct Term.");
									  }
									  else if(!response.equalsIgnoreCase("true"))
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Wrong Answer. True is the Correct Term.");
									  }
									  else
									  {
										  JOptionPane.showMessageDialog(gameFrame, "Correct!");
									  }
									  if(!PlayWindow.validEntry(response))
										  response="Blank";
											  
											  try {
													File fileToBeModified3 = new File("incidentals/data.txt");
													BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified3));
													StringBuffer newString = new StringBuffer("");
													String line;
													while ((line = reader.readLine()) != null) {
														if(line.contains("End of user " + playerName + "'s records."))
														{								
															newString.append(playerName + "'s Answer to Quiz 5 Question " + (k+1) + ": " + response + 
																	"\n\nEnd of user " + playerName + "'s records.\n\n");							
														}
														else if(!line.contains(playerName + "'s Answer to Quiz 5 Question " + (k+1) + ":")) {
												
															newString.append(line);
															if(line.length()>3)
																newString.append("\n");
															if(line.contains("Student records for") || line.contains("End of user"))
																newString.append("\n");
															if(line.contains("End of user"))
																newString.append("\n\n");
															
														}
													
													}
													reader.close();
													BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified3));
													theBR.write(newString.toString());
													theBR.close();
													
												} catch (Exception e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
										  
											  //write student answer to data.txt above
								  }
								  
								  
								  
								  
							  }
							  count++;
							  //increment count after loop here so it happens only once in big quiz
							  
								  //write student answer to data.txt above
						  }
						  
						  try {
								File fileToBeModified = new File("incidentals/users.txt");
								File fileToBeModified2 = new File("incidentals/users.txt");
								//BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified2));
								BufferedReader reader = new BufferedReader(new FileReader(fileToBeModified));
								StringBuffer oldString = new StringBuffer("");
								String line, target1;
								while ((line = reader.readLine()) != null) {
									
									if(line.contains("Username: " + playerName + " "))
									{
										line = line.trim();
										target1 = line.substring(line.indexOf("Last Slide: "));
										System.out.println("tgt1 " +target1);
										line = line.replace(target1, "Last Slide: " + (count+  79)); //i think 24 is the right offset
										System.out.println("line "+ line);
										
									}
									oldString.append(line);
									if(line.length()>3)
										oldString.append("\n");
								}
								
								reader.close();
								BufferedWriter theBR = new BufferedWriter(new FileWriter(fileToBeModified2));
								theBR.write(oldString.toString());
								theBR.close();
								
							} catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						  
						  if(count != 10 && count != 4 && count != 6
								  && count != 9) { //so it will save at battlestations screen until next call
							  count++;
						  }
						  else if((count == 4 && responded[0]==true) || (count == 6 && responded[1]==true))
						  {
							  count++;
							  //incrementing after valid response, not after hitting continue button
						  }
						  
						  
						  if(count==10) {
							  JOptionPane.showMessageDialog(gameFrame, "Thanks for Playing!");
							  gameFrame.dispose();
							  PlayWindow.login();
							  //PlayWindow.battleScene(powerUp, playerName, 4);
						  }
					  }
				});
				
				
			}
		
		
		
		
		
		
		
		
		
	
		
		
		
		
	}
	public static boolean validEntry(String entry)
	{
		if (entry == null)
			return false;
		if(entry.trim().isEmpty())
			return false;
	    String specialCharacters="!#$%&'()*+,-./:;<=>?@[]^_`{|}~";
	    String str2[]=entry.split("");
	    int count=0;
	    for (int i=0;i<str2.length;i++)
	    {
	        if (specialCharacters.contains(str2[i]))
	        {
	            count++;
	        }
	    }       

	    if (entry!=null && count==0 )
	    {
	        return true;
	    }
	    else
	    {
	        return false;
	    }
	}
	public static void battleScene(boolean powerUp, String playerName, int which)
	{
		soldierOneHealth = 1000.0;
		soldierTwoHealth = 1000.0;
		soldierThreeHealth = 1000.0;
		
		playerHealth = 500.0;
		
		
		JFrame newFrame = new JFrame("The American Civil War");
    	
    	newFrame.setSize(900, 600);
    	newFrame.setResizable(false);
    	newFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    	JButton grenade = new JButton();
    	JPanel pnlTop;
    	JPanel pnlBottom;
    	
    	JLabel enemyOne = new JLabel(new ImageIcon("incidentals/blueSoldierOne.jpg"));
    	JLabel enemyTwo = new JLabel(new ImageIcon("incidentals/blueSoldierTwo.jpg"));
    	JLabel enemyThree = new JLabel(new ImageIcon("incidentals/blueSoldierThree.jpg"));
    	
    	JLabel goodGuy = new JLabel(new ImageIcon("incidentals/redSoldierTwo.jpg"));

    	
    	pnlTop = new JPanel(new GridLayout(1, 3, 5, 5));
    	pnlBottom = new JPanel(new GridLayout(1, 3, 5, 5));
    	//pnlMiddle = new JPanel(new FlowLayout());
    	
        pnlTop.setBorder(new TitledBorder("Enemy Team"));  
        pnlBottom.setBorder(new TitledBorder("Your Team"));  
        
        JTextArea display;
		JScrollPane scroll;
		 //middlePanel=new JPanel();
		  //  middlePanel.setBorder(new TitledBorder(new EtchedBorder(), "Display Area"));

		    // create the middle panel components

		    display = new JTextArea(16, 58);
		    //display.setText();
		    display.setEditable(false); // set textArea non-editable
		    display.setText("Press a button to attack!");
			
		        
		        //double maxPlayerHealth = 100.0; //change this to 120.0 if player gets a power up during quiz
		        
		        

		    
		    scroll = new JScrollPane(display);
		    scroll.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

		    //Add Textarea in to middle panel
		    pnlBottom.add(scroll);
		    //myFrame.add(middlePanel);
        
        
        pnlTop.add(enemyOne);
        pnlTop.add(enemyTwo);
        pnlTop.add(enemyThree);
        
        
        
        pnlBottom.add(goodGuy);
        
        
        JPanel buttonPanel = new JPanel(new FlowLayout());
        JButton cannon = new JButton("Cannon");
        JButton shotgun = new JButton("Shotgun");
        

        JButton firstAid = new JButton("First Aid");
        
        JButton skipDemo = new JButton("Skip Battle");

        buttonPanel.add(cannon);
        buttonPanel.add(shotgun);
        buttonPanel.add(firstAid);
        buttonPanel.add(skipDemo);
        
        pnlBottom.add(buttonPanel);
        newFrame.add(pnlTop, BorderLayout.NORTH);
    	newFrame.add(pnlBottom, BorderLayout.SOUTH);
    	newFrame.setVisible(true);
    	
    	skipDemo.addActionListener(new ActionListener() {

    		  public void actionPerformed(ActionEvent event) {
    		    //do whatever should happen when the button is clicked...
    			  newFrame.dispose();
    			  if(which==0)
    				  PlayWindow.playGame(playerName, 0, true);
    			  if(which==1)
    				  PlayWindow.playGame(playerName, 24, true);
    			  if(which==2)
    				  PlayWindow.playGame(playerName, 44, true);
    			  if(which==3)
    				  PlayWindow.playGame(playerName, 63, true);
    			  if(which==4)
    				  PlayWindow.playGame(playerName, 79, true);
    			  
    		  }

    		});
        
        cannon.addActionListener(new ActionListener() {
        	int sel;
			
			public void actionPerformed(ActionEvent e) {
				
		        
		        
		        
		       
		        
		        
		     
				//JOptionPane option = new JOptionPane();
				//String target = option.showInputDialog("enter 1-3 to target soldier!");
				double damage = Math.random()*50.0;
				
				
				
				
				try {
					 sel =Integer.parseInt(JOptionPane.showInputDialog("enter 1-3 to target soldier!"));
				if (sel == 1)
				{
					soldierOneHealth -= (Math.random()*50.0);
					if (soldierOneHealth <= 0)
					{
						display.setText(display.getText()+"\n soldier 1 fainted!");
					}
					else {
						display.setText(display.getText()+"\n You hit soldier 1 with a cannonball!");
						display.setText(display.getText()+"\n Soldier 1 retaliated!");
						//display.setText(display.getText()+"\n You hit soldier 2 with a cannonball!");
						double i = Math.random()*40.0;
						
						playerHealth-=i;
						display.setText(display.getText()
								+"\n You lost "+ (int)i + " HP!  ");
						
					}
				}
				else if (sel == 2)
				{
					soldierTwoHealth -= (Math.random()*50.0);
					if (soldierTwoHealth <= 0)
					{
						display.setText(display.getText()+"\n soldier 2 fainted!");
					}
					else {
						display.setText(display.getText()+"\n You hit soldier 2 with a cannonball!");
						display.setText(display.getText()+"\n Soldier 2 retaliated!");
						//display.setText(display.getText()+"\n You hit soldier 2 with a cannonball!");
						double i = Math.random()*40.0;
						
						playerHealth-=i;
						display.setText(display.getText()
								+"\n You lost "+ (int)i + "   HP! ");
						
					}
				}
				else if (sel == 3)
				{
					soldierThreeHealth -= (Math.random()*50.0);
					if (soldierThreeHealth <= 0)
					{
						display.setText(display.getText()+"\n soldier 3 fainted!");
					}
					else {
						display.setText(display.getText()+"\n You hit soldier 3 with a cannonball!");
						display.setText(display.getText()+"\n Soldier 3 retaliated!");
						//display.setText(display.getText()+"\n You hit soldier 3 with a cannonball!");
						double i = Math.random()*40.0;
						
						display.setText(display.getText()
								+"\n You lost "+ (int)i + "  HP!  ");
						playerHealth-=i;
					}
				}
				else {
					JOptionPane.showMessageDialog(newFrame, "Wrong selection");
				}
				}
				catch(Exception g) {JOptionPane.showMessageDialog(newFrame, "Wrong selection");}
				
				
				
				
				
				if(playerHealth <= 0.0)
				{
					JOptionPane.showMessageDialog(newFrame, "You Lose. Better luck next time!");
					newFrame.dispose();
					if(which==0)
	    				  PlayWindow.playGame(playerName, 0, true);
	    			  if(which==1)
	    				  PlayWindow.playGame(playerName, 24, true);
	    			  if(which==2)
	    				  PlayWindow.playGame(playerName, 44, true);
	    			  if(which==3)
	    				  PlayWindow.playGame(playerName, 63, true);
	    			  if(which==4)
	    				  PlayWindow.playGame(playerName, 79, true);
				}
				else if(soldierOneHealth <= 0.0 && soldierTwoHealth <= 0.0 && soldierThreeHealth <= 0.0)
				{
					JOptionPane.showMessageDialog(newFrame, "You Beat the Confederates!. Good job soldier!");
					newFrame.dispose();
					if(which==0)
	    				  PlayWindow.playGame(playerName, 0, true);
	    			  if(which==1)
	    				  PlayWindow.playGame(playerName, 24, true);
	    			  if(which==2)
	    				  PlayWindow.playGame(playerName, 44, true);
	    			  if(which==3)
	    				  PlayWindow.playGame(playerName, 63, true);
	    			  if(which==4)
	    				  PlayWindow.playGame(playerName, 79, true);
				}
				//start paste
				/*
				if(Integer.parseInt(target) == 1)
	        	{
	        		
	        		
	        		if(Math.random() >0.2)
	        		{
	        		
		        		damageMultiplier = Math.random() * 80.0;
		            	if (damageMultiplier < 40.0)
		            		damageMultiplier = 40.0;
		            	soldierOneHealth -= damageMultiplier;
		         
		            	if(soldierOneHealth <= 0.0 && deadSoldiers[0] == false)
		            	{
			        		deadSoldiers[0] = true;
			        		
			        		display.setText(display.getText()+"\nYou have defeated Soldier 1!");
		            		soldierOneHealth = 0.0;
		            	}
		            	//break;
	        		}
	        		else {
	        			display.setText(display.getText()+"\nYour cannon attack missed!");
	        		
	        			//break;
	        		}
	            	
	        	}
	        	else if(Integer.parseInt(target) == 2)
	        	{
	        		if(soldierTwoHealth <= 0.0)
	        		{
	        			display.setText(display.getText()+"\nSoldier 2 has fainted!");
	        			//continue;
	        		}
	        		
	        		if(Math.random() >0.2)
	        		{
	        		
		        		damageMultiplier = Math.random() * 80.0;
		            	if (damageMultiplier < 40.0)
		            		damageMultiplier = 40.0;
		            	soldierTwoHealth -= damageMultiplier;
		            	
		            	if(soldierTwoHealth <= 0.0 && deadSoldiers[1] == false)
		            	{
			        		deadSoldiers[1] = true;
			        		display.setText(display.getText()+"\nYou have defeated Soldier 2!");
		            		soldierTwoHealth = 0.0;
		            	}
		            	//break;
	        		}
	        		else {
	        			display.setText(display.getText()+"\nYour cannon attack missed!");
	        			//break;
	        		}
	            	
	        	}
	        	else if(Integer.parseInt(target) == 3)
	        	{
	        		if(soldierThreeHealth <= 0.0)
	        		{
	        			display.setText(display.getText()+"\nSoldier 2 has fainted!");
	        			//continue;
	        		}
	        		
	        		if(Math.random() >0.2)
	        		{
	        		
		        		damageMultiplier = Math.random() * 80.0;
		            	if (damageMultiplier < 40.0)
		            		damageMultiplier = 40.0;
		            	soldierThreeHealth -= damageMultiplier;
		            	
		            	if(soldierThreeHealth <= 0.0 && deadSoldiers[2] == false)
		            	{
			        		deadSoldiers[2] = true;
			        		display.setText(display.getText()+"\nYou have defeated Soldier 3!");
		            		soldierThreeHealth = 0.0;
		            	}
		            	//break;
	        		}
	        		else {
	        			display.setText(display.getText()+"\nYour cannon attack missed!");
	        			//break;
	        		}
	            	
	        	} */
				//end paste
			}
        });
        
        firstAid.addActionListener(new ActionListener() {

			int dmg;
			public void actionPerformed(ActionEvent e) {
				
				display.setText(display.getText()+"\n First Aid! You gain 40 HP!");
				
				playerHealth+=40.0;
				
				if (soldierOneHealth > 0.0)
				{
					dmg = (int)(Math.random() * 40.0);
					display.setText(display.getText()+"\n Soldier 1 attacked! You lost " + dmg +"   HP!");
							 playerHealth-=(double)dmg;
				}
				else if (soldierTwoHealth > 0.0)
				{
					dmg = (int)(Math.random() * 40.0);
					display.setText(display.getText()+"\n Soldier 2 attacked! You lost " + dmg +"   HP!");
							 playerHealth-=(double)dmg;
				}
				else if (soldierThreeHealth > 0.0)
				{
					dmg = (int)(Math.random() * 40.0);
					display.setText(display.getText()+"\n Soldier 3 attacked! You lost " + dmg +"   HP!");
							 playerHealth-=(double)dmg;
				}
				
				if(playerHealth <= 0.0)
				{
					JOptionPane.showMessageDialog(newFrame, "You Lose. Better luck next time!");
					newFrame.dispose();
					if(which==0)
	    				  PlayWindow.playGame(playerName, 0, true);
	    			  if(which==1)
	    				  PlayWindow.playGame(playerName, 24, true);
	    			  if(which==2)
	    				  PlayWindow.playGame(playerName, 44, true);
	    			  if(which==3)
	    				  PlayWindow.playGame(playerName, 63, true);
	    			  if(which==4)
	    				  PlayWindow.playGame(playerName, 79, true);
				}
				
			}
        });
        shotgun.addActionListener(new ActionListener() {
        	int dmg;
        	public void actionPerformed(ActionEvent e) {
			
        		display.setText(display.getText()+"\n Blast damage! You dealt damage to all soldiers!");
        		soldierOneHealth-=20.0;
        		soldierTwoHealth-=20.0;
        		soldierThreeHealth-=20.0;

			if (soldierOneHealth <= 0)
			{
				display.setText(display.getText()+"\n Soldier 1 fainted!");
			}
			if (soldierTwoHealth <= 0)
			{
				display.setText(display.getText()+"\n Soldier 2 fainted!");
			}
			if (soldierThreeHealth <= 0)
			{
				display.setText(display.getText()+"\n Soldier 3 fainted!");
			}
			if (soldierOneHealth > 0.0)
			{
				dmg = (int)(Math.random() * 40.0);
				display.setText(display.getText()+"\n Soldier 1 attacked! You lost " + dmg +"   HP!");
						 playerHealth-=(double)dmg;
				display.setText(display.getText()+"\n "+ "!");
			}
			else if (soldierTwoHealth > 0.0)
			{
				dmg = (int)(Math.random() * 40.0);
				display.setText(display.getText()+"\n Soldier 2 attacked! You lost " + dmg +"   HP!");
						 playerHealth-=(double)dmg;
						 display.setText(display.getText()+"\n "+   "!");
			}
			else if (soldierThreeHealth > 0.0)
			{
				dmg = (int)(Math.random() * 40.0);
				display.setText(display.getText()+"\n Soldier 3 attacked! You lost " + dmg +"   HP!");
						 playerHealth-=(double)dmg;
						 display.setText(display.getText()+"\n "+  "!");
			}
				
					
				if(playerHealth <= 0.0)
				{
					JOptionPane.showMessageDialog(newFrame, "You Lose. Better luck next time!");
					newFrame.dispose();
					if(which==0)
	    				  PlayWindow.playGame(playerName, 0, true);
	    			  if(which==1)
	    				  PlayWindow.playGame(playerName, 24, true);
	    			  if(which==2)
	    				  PlayWindow.playGame(playerName, 44, true);
	    			  if(which==3)
	    				  PlayWindow.playGame(playerName, 63, true);
	    			  if(which==4)
	    				  PlayWindow.playGame(playerName, 79, true);
				}
				else if(soldierOneHealth <= 0.0 && soldierTwoHealth <= 0.0 && soldierThreeHealth <= 0.0)
				{
					JOptionPane.showMessageDialog(newFrame, "You Beat the Confederates!. Good job soldier!");
					newFrame.dispose();
					if(which==0)
	    				  PlayWindow.playGame(playerName, 0, true);
	    			  if(which==1)
	    				  PlayWindow.playGame(playerName, 24, true);
	    			  if(which==2)
	    				  PlayWindow.playGame(playerName, 44, true);
	    			  if(which==3)
	    				  PlayWindow.playGame(playerName, 63, true);
	    			  if(which==4)
	    				  PlayWindow.playGame(playerName, 79, true);
				}
				
			}
        });
        
        
        
        
        
       
	}
	
	public static void login()
	{
		JFrame theFrame = new JFrame();
		theFrame.setResizable(false);
		JButton login, register, studentRecords, quit;
		 
		 JPanel panel;
		 JLabel label1,label2;
		 final JTextField  text1,text2;
		 
		
		label1 = new JLabel();
		  label1.setText("Username:");
		  text1 = new JTextField(15);

		  label2 = new JLabel();
		  label2.setText("Password:");
		  text2 = new JPasswordField(15);
		 
		  register=new JButton("Register");
		  login = new JButton("Login");
		  studentRecords=new JButton("Records");
		  quit = new JButton("Quit");
		  
		  //REGISTER=new JButton("REGISTER");
		  
		  panel=new JPanel(new GridLayout(4,1));
		  panel.add(label1);
		  panel.add(text1);
		  panel.add(label2);
		  panel.add(text2);
		  panel.add(register);
		  panel.add(login);
		  panel.add(studentRecords);
		  panel.add(quit);
		  //panel.add(REGISTER);
		  theFrame.add(panel,BorderLayout.CENTER);
		  //SUBMIT.addActionListener();
		  theFrame.setTitle("The American Civil War");
		  theFrame.setSize(300, 300);
		  theFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		  theFrame.setVisible(true);
		  
		  quit.addActionListener(new ActionListener() {
			  public void actionPerformed(ActionEvent ae) {
				 System.exit(0);
			  }
		  });
		  
		  studentRecords.addActionListener(new ActionListener() {
			  public void actionPerformed(ActionEvent event) {
				  File file = new File("incidentals/data.txt");
			        FileReader fr;
	
			        StringBuffer scoreString = new StringBuffer("");
					try {
						fr = new FileReader(file);
						BufferedReader br = new BufferedReader(fr);
				        String line;
				        
				        //System.out.println("Read text file using BufferedReader");
				        while((line = br.readLine()) != null){
				            //process the line
				            scoreString.append(line+"\n");
				        }
				        //close resources
				        br.close();
				        fr.close();
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
			        
			        
			        theFrame.dispose();
					JFrame myFrame = new JFrame("Civil War Game -- Student Answers");
					myFrame.setSize(900, 600);
					myFrame.setResizable(false);
					//JLabel thisLabel = new JLabel(350, 350);
					myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
					JButton returnButton = new JButton("Return");
					
					returnButton.addActionListener(new ActionListener() {
						public void actionPerformed (ActionEvent ae)
						{
							myFrame.dispose();
							PlayWindow.login();
						}
					});
					//myFrame.setSize(500, 500);
					//myFrame.add(thisLabel);
					JPanel middlePanel;
					JTextArea display;
					JScrollPane scroll;
					 middlePanel=new JPanel();
					    middlePanel.setBorder(new TitledBorder(new EtchedBorder(), "Display Area"));

					    // create the middle panel components

					    display = new JTextArea(16, 58);
					    display.setText(scoreString.toString());
					    display.setEditable(false); // set textArea non-editable
					    scroll = new JScrollPane(display);
					    scroll.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
					    scroll.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

					    //Add Textarea in to middle panel
					    middlePanel.add(scroll);
					    middlePanel.add(returnButton);
					    myFrame.add(middlePanel);
					    //myFrame.pack();
					myFrame.setVisible(true);
					myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
					
			  }

		  }); //end register aciton listener
		  register.addActionListener(new ActionListener() {
			  
			  public void actionPerformed(ActionEvent event) {
				  String enteredUser, enteredPass;
				  enteredUser=text1.getText();
				  enteredPass=text2.getText();
				  boolean userTaken = false;
			    //do whatever should happen when the button is clicked...
				  //time to read the usernames to see if its already been entered.
				  
				  FileWriter userFR = null;
			        BufferedWriter userBR = null;
			       // StringBuffer userSB = new StringBuffer("");
			        
			        
			        
			        //userSB.append(enteredUser);  sb not necessary here as only one line to be written ?
			        
				  
				  
				  File userFile = new File("incidentals/users.txt");
				  StringBuffer entireUserFile = new StringBuffer("");
				  try (BufferedReader br = new BufferedReader(new FileReader(userFile))) {
					    String line;
					    while ((line = br.readLine()) != null) {
					       entireUserFile.append(line + "\n");
					       if((line.contains("Username: ") 
					    		   && line.contains(enteredUser)) || enteredUser.length() <4)
					       {
					    	   JOptionPane.showMessageDialog(theFrame,"Username unavailable. \nEnter a username at least 4 characters long.",
					    			   "Error",JOptionPane.ERROR_MESSAGE);
					    	   userTaken=true;
					    	   break;
					       }
					    }
					       
					       if(!userTaken)
					       {
					    	   try{
						            userFR = new FileWriter(userFile);
						            userBR = new BufferedWriter(userFR);
						            //for(int i = noOfLines; i>0; i--){
						                userBR.write(entireUserFile.toString() + "Username: " + enteredUser + 
						                		"   Password: " + enteredPass + "  Last Slide: " + "-1" + "\n");
						            
						        } catch (IOException c) {
						            c.printStackTrace();
						        }finally{
						            try {
						                userBR.close();
						                userFR.close();
						            } catch (IOException c) {
						                c.printStackTrace();
						            }
						        }
					    	   
					    	   File theFile = new File("incidentals/data.txt");
								BufferedWriter studBuffer = null;
								
						        //FileReader fr;
								try {
							 
							       studBuffer = new BufferedWriter(new FileWriter(theFile, true));
							       studBuffer.write("\n\nStudent records for user " + enteredUser + ":\n\n" + 
							    		   "End of user " + enteredUser + "'s records.\n\n");
							       
								} catch (Exception e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}finally{
						            try {
						                studBuffer.close();
						            } catch (IOException c) {
						                c.printStackTrace();
						            }
						        }
					    	   
					    	   
					    	   JOptionPane.showMessageDialog(theFrame,"Successfully registered "+enteredUser);
					    	   
					       }
					    }
					
				  catch (Exception c)
				  {
					  System.out.println(c.getMessage());
				  }
			  }

			}); //end register aciton listener
		  
		  login.addActionListener(new ActionListener() {

			  public void actionPerformed(ActionEvent event) {
			    //do whatever should happen when the button is clicked...
				  
				  String enteredUser, enteredPass, lastSlide;
				  int startingSlide;
				  enteredUser=text1.getText();
				  enteredPass=text2.getText();
				  boolean correct = false;
				  File userFile = new File("incidentals/users.txt");
				  try (BufferedReader br = new BufferedReader(new FileReader(userFile))) {
					    String line;
					    while ((line = br.readLine()) != null) {
					       //entireUserFile.append(line + "\n");
					       if(line.contains("Username: ") 
					    		   && line.contains(enteredUser) && line.contains("Password: ") 
					    		   &&line.contains(enteredPass))
					       {
					    	   //retrieve proper slide from string users.txt
					    	   lastSlide = line.substring(line.indexOf("Last Slide: ")).trim();
					    	   startingSlide = Integer.parseInt(lastSlide.substring(12,lastSlide.length()));
					    	   
					    	   //Just played around with the lastslide here, may be temperamental!!!
					    	   
					    	   JOptionPane.showMessageDialog(theFrame,"Logging in " + enteredUser);
					    	   theFrame.dispose();
					    	   
					    	   
					    	   if(startingSlide>-1) //hoping this fixes error when slides repeat after log back in
					    		   startingSlide++;
					    	   
					    	   
					    	   PlayWindow.playGame(enteredUser, startingSlide, false);
					    	   
					    	   
					    	   
					    	   correct=true;
					    	   break;
					       }
					    }
					       
					       if(!correct)
					       {
					    	
					    	   JOptionPane.showMessageDialog(theFrame,"Incorrect username or password",
					    			   "Error",JOptionPane.ERROR_MESSAGE);
					       }
					    }
					
				  catch (Exception c)
				  {
					  System.out.println(c.getMessage());
				  }
			  }

			});
	}
	public static int isLogged = 0;
	public static void main(String args[]) throws IOException
	{
		PlayWindow.login();		
		
		
		
	
	}
}
 
 
